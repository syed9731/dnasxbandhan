@using DNAS.Domian.Common
@using Microsoft.Extensions.Options
@model DNAS.Domain.DTO.Note.SendBackNoteDto

@{
    ViewData["Title"] = "Edit SentBack Note";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.CreateNewNotes = "active";
    ViewBag.ISAjexNotNeed = "true";
    int i = 1;
    int attachmentListCount = 0;
}
<link rel="stylesheet" href="~/assets/vendor/select2/select2.min.css" />
<link rel="stylesheet" href="~/assets/summernote/npm/summernote@0.8.18/dist/summernote.min.css" asp-append-version="true" />
<link rel="stylesheet" href="~/assets/summernote/npm/summernote@0.8.18/dist/summernote-helper.css" rel="stylesheet" asp-append-version="true" />

<style>
    .underpara {
        margin-top: 1rem;
        margin-bottom: 1rem;
    }

    .note-editor {
        background: #fff;
    }

    .btn-rounded .ti-plus, .btn-rounded .ti-close {
        vertical-align: middle;
    }

    span {
        display: inline-block;
    }

    .remove {
        padding: 9px 13px 0px;
        margin-left: 10px;
        height: 42px;
        width: 42px;
    }

    a.downloadatta {
        width: 90%;
        text-align: left;
    }
</style>
<div class="content-wrapper">
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <h4 class="f-s-22 f-w-600 text-black pb-4">Re Publish Sent Back Note</h4>
                </div>
                <div class="col-6">
                </div>
            </div>

            <form action="/Note/EditSendBackNote" method="post" id="dnsform" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.NoteModel!.CategoryName)
                @Html.HiddenFor(m => m.ApproverListJson)
                @Html.HiddenFor(m => m.AttachmentListJson)
                @Html.HiddenFor(m => m.NoteModel!.NoteId)
                <input type="hidden" id="gstbdg" value="@TempData["encdata"]" />


                <input type="hidden" value="@Model.NoteModel.NoteState" id="NoteState" name="NoteState" />
                <div class="row g-4">
                    <div class="col-md-6">
                        <span class="form-label">Title*</span>
                        @Html.TextBoxFor(m => m.NoteModel!.NoteTitle, new { @class = "form-control  form-control-lg tagrestrict", @placeholder = "Note Title", @id = "notetitle", @autocomplete = "off", @readonly = true })
                        <span class="error">@Html.ValidationMessageFor(m => m.NoteModel!.NoteTitle)</span>
                    </div>

                    <div class="col-md-6">
                        <span class="form-label">Category*</span>
                        @Html.TextBoxFor(m => m.NoteModel!.CategoryName, new { @class = "form-control  form-control-lg", @readonly = true })
                        <span class="error" id="categoryidname">@Html.ValidationMessageFor(m => m.NoteModel!.CategoryId)</span>
                    </div>
                    <!--only show for financial category-->
                    @if (Model.NoteModel.CategoryId == "1")
                    {
                        <!--Expense Incurred-->
                        <div class="col-md-6">
                            <span class="form-label">Expenses Incurred At*</span>
                            @Html.HiddenFor(m => m.NoteModel!.ExpenseIncurredAtId)
                            @Html.TextBoxFor(m => m.ExpenseIncurredAtName, new { @class = "form-control  form-control-lg", @readonly = true })
                        </div>

                        <!--Nature of expense-->
                        <div class="col-md-6">
                            <span class="form-label">Nature Of Expenses*</span>
                            @Html.HiddenFor(m => m.NoteModel!.NatureOfExpensesId)
                            @Html.TextBoxFor(m => m.NatureOfExpensesName, new { @class = "form-control  form-control-lg", @readonly = true })
                        </div>

                        <!--capital expenditure-->
                        <div class="col-md-4">
                            <span class="form-label">Capital Expenditure*</span>
                            @Html.TextBoxFor(m => m.NoteModel!.CapitalExpenditure, new { @class = "form-control form-control-lg numberonly", @placeholder = "Amount in ₹", @id = "CapitalExpenditure", @autocomplete = "off", @readonly = true })
                        </div>

                        <!--operational expenditure-->
                        <div class="col-md-4">
                            <span class="form-label">Operational Expenditure*</span>
                            @Html.TextBoxFor(m => m.NoteModel!.OperationalExpenditure, new { @class = "form-control form-control-lg numberonly", @placeholder = "Amount in ₹", @id = "OperationalExpenditure", @autocomplete = "off", @readonly = true })
                        </div>

                        <!--total amount-->
                        <div class="col-md-4">
                            <span class="form-label">Total Amount</span>
                            @Html.TextBoxFor(m => m.NoteModel!.TotalAmount, new { @class = "form-control form-control-lg", @placeholder = "0", @readonly = "readonly", @id = "totalamount" })
                        </div>

                    }

                    <!--Note Body-->
                    <div class="col-12">
                        <span class="form-label">Note* </span>
                        @Html.TextAreaFor(model => model.NoteModel!.NoteBody, new { @class = "notecontent", id = "summernote" })
                    </div>

                    <!--Attachment List-->
                    <div class="row g-4">
                        <span class="form-label">Attachments</span>
                        @if (Model.AttachmentList.Count <= 5)
                        {
                            <span>(You can include a maximum of 5 attachments.)</span>
                        }
                        else
                        {
                            <span>Attachment limit is exceeded.</span>
                        }
                        @{
                            if (Model.AttachmentList?.Count > 0)
                            {
                                int fileCount = 0;
                                attachmentListCount = Model.AttachmentList.Count;

                                foreach (var item in Model.AttachmentList)
                                {
                                    fileCount++;
                                            <div class="col-md-6" style="display:inline-flex">
                                        <a class="btn btn-outline-primary btn-sm downloadatta" id="Attachment_@fileCount" href="@item.AttachmentPath" download="@item.DocumentName" data-attachmentId="@item.AttachmentId">
                                                    <span class="mdi mdi-paperclip"></span>
                                                    @item.DocumentName
                                                </a>
                                                <span class="remove btn btn-outline-danger btn-sm btn-rounded"  id="crossattach_@fileCount" onclick="javascript:removeattachfile(this)"> <i class='ti-close'> </i></span>
                                            </div>
                                }

                                for (int f = 1; f <= (5 - attachmentListCount); f++)
                                {
                                   
                                            <div class="col-md-6" style="display:inline-flex">
                                                <input name="@Html.NameFor(m=>m.NoteModel!.AttachFiles)" class="form-control form-control-lg attach" type="file" style="width:90%;" id="fileattach_@f">
                                                <span class="remove btn btn-outline-danger btn-sm btn-rounded" style="display:none;" id="crossattach_@f" onclick="javascript:removeattachfile(this)" aria-label="Remove attachment"> <i class='ti-close'> </i></span>
                                            </div>
                                }

                            }
                            else
                            {
                                for (int f = 1; f <= (5 - attachmentListCount); f++)
                                {
                                            <div class="col-md-6" style="display:inline-flex">
                                        <input name="@Html.NameFor(m=>m.NoteModel!.AttachFiles)" class="form-control form-control-lg attach" type="file" style="width:90%;" id="fileattach_@f">
                                                <span class="remove btn btn-outline-danger btn-sm btn-rounded" style="display:none;" id="crossattach_@f" onclick="javascript:removeattachfile(this)" aria-label="Remove attachment"> <i class='ti-close'> </i></span>
                                            </div>

                                }
                            }
                        }

                        <div class="col-6">
                            <button class="btn btn-outline-primary float-end btn-lg f-s-16" type="button" id="notepreview">Preview Note</button>
                        </div>
                    </div>

                    <!--only show for financial category-->
                    <!--Recommenders/Reviewers List-->
                    @if (Model.NoteModel.CategoryId == "1")
                    {
                        <div class="col-md-9" id="recomendedapproverdiv" style="">
                            <div class="d-flex justify-content-between pt-2 pb-2 align-items-center">
                                <span class="form-label">Add Recommenders/Reviewers <span style="font-size: 13px; font-weight: 400; ">(You Can Select Up To 5 Approvers)</span></span>
                            </div>
                            <div>
                                <div class="row" style="padding-top: 1px; padding-bottom: 1px; display: none;" id="confirmrecomendedapprover">
                                </div>
                            </div>
                            <div class="row">
                                @if (Model.ApproverList != null && Model.ApproverList.Count > 0 && Model.ApproverList.Count <= 5)
                                {
                                    foreach (var dr in Model.ApproverList.Where(m => (m.ApproverType is not null && m.ApproverType.ToUpper() == "R")))
                                    {
                                        <div class="col-9">
                                            <input type="hidden" id="recomendedtempapproveruid" value="@dr.ApproverId" />
                                            <input type="hidden" id="recomendedapvrserialno" class="hiddenclass" value="@dr.UserId" />
                                            <input type="text" class="form-control form-control-lg" readonly id="confirmvalue_@i" value="@dr.FirstName  @(dr.MiddleName != " " ? dr.MiddleName : " ")   @dr.LastName  |   @dr.Department  |  @dr.Grade  |  @dr.Department" />
                                            <input type="hidden" id="removeAppconfirm_@i" value="@dr.ApproverId" />
                                        </div>
                                    }
                                }
                            </div>
                            <div class="d-flex justify-content-between pt-2 pb-2 align-items-center ">
                                <span class="form-label arrovernotfound"></span>
                            </div>
                        </div>
                    }

                    <!--Approver List-->
                    <div class="col-md-9">
                        <div class="d-flex justify-content-between pt-2 pb-2 align-items-center">
                            <span class="form-label">Add Approver* <span style="font-size: 13px; font-weight: 400; ">(You Can Select Up To 7 Approvers)</span></span>
                        </div>
                        <div>
                            <div class="row" style="padding-top: 1px; padding-bottom: 1px;" id="confirmapprover">
                                @if (Model.ApproverList != null && Model.ApproverList.Count > 0 && Model.ApproverList.Count <= 7)
                                {
                                    foreach (var dr in Model.ApproverList.Where(m => (m.ApproverType is null || m.ApproverType.ToUpper() != "R")))
                                    {
                                        <div class="col-9">
                                            <input type="hidden" id="confirmserial_@i" value="@i" />
                                            <input type="hidden" id="confirmuserid_@i" class="hiddenclass" value="@dr.UserId" />
                                            <input type="text" class="form-control form-control-lg" readonly id="confirmvalue_@i" value="@dr.FirstName  @(dr.MiddleName != " " ? dr.MiddleName : " ")   @dr.LastName  |   @dr.Role |  @dr.Grade  |  @dr.Department" />
                                            <input type="hidden" id="removeAppconfirm_@i" value="@dr.ApproverId" />
                                        </div>
                                        i++;
                                    }
                                }
                            </div>
                        </div>
                        <div class="d-flex justify-content-between pt-2 pb-2 align-items-center ">
                            <span class="form-label arrovernotfound"></span>
                        </div>
                    </div>

                    <div class="col-12 text-end">
                        <button type="button" class="btn btn-secondary btn-lg f-s-16 me-2" id="btnsavetemplate">Save as a Template</button>
                        <button class="btn btn-primary btn-lg f-s-16 loadervisible" type="button" id="btnsave">Save and Submit</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="success_popup" tabindex="-1" aria-labelledby="delet_popupLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <div class="text-end">
                    <button type="button" class="btn btn-outline-warning btn-sm btn-rounded" data-bs-dismiss="modal"
                            aria-label="Close">
                        <i class="mdi mdi mdi-close"></i>
                    </button>
                </div>
                <div class="modal-top-icon f-s-60 text-center text-success">
                    <i class="mdi mdi-alert-circle-outline"></i>
                </div>
                <h4 class="text-center f-s-16 text-success pt-1 pb-3" id="successmsg">
                    .
                </h4>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="view_popup" tabindex="-1" aria-labelledby="delet_popupLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="staticBackdropLabel">.</h3>
                <div class="text-end">
                    <button type="button" class="btn btn-outline-warning btn-sm btn-rounded" data-bs-dismiss="modal"
                            aria-label="Close">
                        <i class="mdi mdi mdi-close"></i>
                    </button>
                </div>
            </div>
            <div class="modal-body">
                <div class="note-container" id="previewnotebody">
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="view_TemplateName" tabindex="-1" aria-labelledby="delet_popupLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Template Name</h4>
                <div class="text-end">
                    <button type="button" class="btn btn-outline-warning btn-sm btn-rounded" data-bs-dismiss="modal"
                            aria-label="Close">
                        <i class="mdi mdi mdi-close"></i>
                    </button>
                </div>
            </div>
            <div class="modal-body">
                <div class="note-container" style="background:none;">
                    <input type="text" name="TemplateName" id="TemplateName" class="form-control  form-control-lg tagrestrict" placeholder="Template Name" />
                </div>
                <button style="float:right" type="button" class="btn btn-secondary" id="btnSaveTemp">Save Template</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="ChooseTemplate_popup" tabindex="-1" aria-labelledby="choose_popupLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-body">
                <form action="/note/DeleteDraft" method="post">
                    <div class="text-end">
                        <button type="button" class="btn btn-outline-warning btn-sm btn-rounded" data-bs-dismiss="modal"
                                aria-label="Close">
                            <i class="mdi mdi mdi-close"></i>
                        </button>
                    </div>

                    <div class="modal-top-icon f-s-60 text-center text-danger">
                        <i class="mdi mdi-information-outline" style="color: #1f44ff;"></i>
                    </div>
                    <h2 class="text-center f-s-24 text-primary pt-1 pb-3">
                        Templates
                    </h2>
                    <p class="text-center f-s-15 pb-2">
                        Do you want to choose template?
                    </p>
                    <div class="text-center pb-2">
                        <button type="button" class="btn btn-secondary btn-sm me-2" data-bs-dismiss="modal">
                            No
                        </button>
                        <input type="hidden" name="noteid" id="Draftnote" />
                        <a href="/Template/Library" class="btn btn-primary btn-sm">Yes</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section PreScripts
{
    <script src="~/assets/js/jquery-3.5.1.min.js"></script>
    <script src="~/assets/js/bootstrap.bundle.min.js"></script>

}

@section PostScripts {
    <script src="/assets/summernote/npm/summernote@0.8.18/dist/summernote.min.js" asp-append-version="true"></script>
    <script src="~/js/jquery-migrate-3.4.1.min.js"></script>
    <script src="~/js/jquery.validate.min.js"></script>
    <script src="~/js/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/js/aes.js"></script>
    <script src="~/js/custom.js" asp-append-version="true"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            if ('@TempData["msg"]' != '') {
                sucesstoast();
                $('.sucessmsg').html('@TempData["msg"]');
            }
            if ('@TempData["errormsg"]' != '') {
                errortoast();
                $('.alertmsg').html('@TempData["errormsg"]');
            }

            if ($("#NoteModel_CategoryName").val() != "") {
                $("#categoryidname").css("display", "none");
            }


            var opex = '@Model.NoteModel.OperationalExpenditure';
            if (opex != '') {
                $("#OperationalExpenditure").text(formatNumberWithPattern(opex));
            }

            var capex = '@Model.NoteModel.CapitalExpenditure';
            if (capex != '') {
                $("#CapitalExpenditure").text(formatNumberWithPattern(capex));
            }

            var totalamount = '@Model.NoteModel.TotalAmount';
            if (totalamount != '') {
                $("#totalamount").text(formatNumberWithPattern(totalamount));
            }


            var notecontent = '';
            var oldcontnet = '';
            $('#summernote').summernote({
                callbacks: {
                    onChange: function (contents, $editable) {

                        console.log('onChange:', contents, $editable);
                        notecontent = contents;

                    },
                }
            });
            var interval = setInterval(function () { savenote(); }, 3000);

            function savenote() {
                console.log('t1');
                if ($('#notetitle').val() == '' || $('#CategoryId').val() == '' || oldcontnet == notecontent) {
                    return false;
                }
                if ($("#NoteId").val() != '') {
                    console.log('t2');

                    var request = { noteid: $("#NoteId").val(), NoteBody: notecontent };
                    var headers = {};
                    headers['RequestVerificationToken'] = $('input[name="__RequestVerificationToken"]').val();
                    $.ajax({
                        type: "post",
                        cache: false,
                        url: "/note/UpdateNoteBody",
                        data: JSON.stringify(request),
                        dataType: "json",
                        headers: headers,
                        contentType: "application/json; charset=utf-8",
                        success: function (result) {
                            oldcontnet = notecontent;
                           sucesstoast();
                            $('.sucessmsg').html('Saved to draft');
                        },
                        error: function (result) {
                            console.log("No Connection to server");
                        },
                    });
                }
                else {

                    var request = { NoteBody: notecontent };
                    var headers = {};
                    headers['RequestVerificationToken'] = $('input[name="__RequestVerificationToken"]').val();
                    $.ajax({
                        type: "post",
                        cache: false,
                        url: "/note/InsertNoteBody",
                        data: JSON.stringify(request),
                        dataType: "json",
                        headers: headers,
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            if (data != null) {
                                $("#NoteId").val(data.noteId);
                                oldcontnet = notecontent;
                                sucesstoast();
                                $('.sucessmsg').html('Saved to draft');
                            }
                        },
                        error: function (textStatus, errorThrown) {
                            console.log(textStatus);
                        }
                    });
                }

            }

            if ($("#CategoryId option:selected").text() == "Financial") {
                let ExpInAt = '@Model.NoteModel.ExpenseIncurredAtId';
                if (ExpInAt != "") {
                    $.getJSON("/note/fetchExpensesIncurredAt", { idd: $("#CategoryId").val() }, function (data) {
                        if (data != null) {
                            let items = '';
                            items += "<option value=''>Select</option>";
                            $.each(data, function (i, j) {
                                if (ExpInAt == data[i].value) {
                                    items += "<option selected value='" + data[i].value + "'>" + data[i].key + "</option>";
                                }
                                else {
                                    items += "<option value='" + data[i].value + "'>" + data[i].key + "</option>";
                                }
                            });
                            $("#ExpensesIncurredAtid").html(items);
                        }
                    });
                    let NetExp = '@Model.NoteModel.NatureOfExpensesId';
                    $.getJSON("/note/fetchNatureOfExpense", { idd: ExpInAt }, function (data) {
                        if (data != null) {
                            let items = '';
                            items += "<option value=''>Select</option>";
                            $.each(data, function (i, j) {
                                if (NetExp == data[i].value) {
                                    items += "<option selected value='" + data[i].value + "'>" + data[i].key + "</option>";
                                }
                                else {
                                    items += "<option value='" + data[i].value + "'>" + data[i].key + "</option>";
                                }
                            });
                            $("#NatureOfExpensesId").html(items);
                        }
                    });
                }
                $(".amount-box").show();
                $("#approversearch").hide();
                $('#recomendedapproverdiv').show();
            }
            else if ($("#CategoryId option:selected").text() == "Non Financial") {
                $("#ExpensesIncurredAtid").val("");
                $("#NatureOfExpensesId").val("");
                $("#CapitalExpenditure").val("");
                $("#OperationalExpenditure").val("");
                $("#totalamount").val("0");
                $(".amount-box").hide();
                $("#approversearch").show();
                $('#recomendedapproverdiv').hide();
            }

            $("#btnsave").click(function () {
                ValidationForm();
            });

            function ValidationForm() {
                if (!$("#dnsform").valid()) {
                    document.getElementById('load').style.visibility = "hidden";
                    return false;
                }
                else {
                    $("#NoteState").val("Publish");
                    ValidateFormCheck();
                }
            }

            $("#btnsavedraft").click(function () {
                if (!$("#dnsform").valid()) {
                    document.getElementById('load').style.visibility = "hidden";
                    return false;
                }
                else {
                    $("#NoteState").val("Draft");
                    $("#totalamount").val("0");
                    ValidateFormCheck();
                }
            });

        });

        function ValidateFormCheck() {
            
            let numItems = $('.hiddenclass').length;    //Count of Approver
            let userid = $("#UserId").val();
            let notetitle = $("#NoteTitle").val();
            let categoryid = $("#CategoryId").val();

            let summernote = $("#summernote").val();
            let categoryname = $("#NoteModel_CategoryName").val();
            if (summernote == '') {
                $("#errormsg").text("Please enter the content in the note area.");
                $("#error_popup").modal('show');
                document.getElementById('load').style.visibility = "hidden";
                return false;
            }

            $('form#dnsform').submit();

        }

        $('INPUT[type="file"]').change(function () {
            var ext = this.value.substr((this.value.lastIndexOf('.') + 1));
            switch (ext.toLowerCase()) {
                case 'jpg':
                case 'jpeg':
                case 'png':
                case 'pdf':
                case 'doc':
                case 'docx':
                case 'xlx':
                case 'xlsx':
                case 'zip':
                    break;
                default:

                    $("#errormsg").text("Only .jpg, .jpeg, .png, .pdf, .doc, .docx, .xlx, .xlsx, .zip file types are allowed.");
                    $("#error_popup").modal('show');
                    this.value = '';
            }
        });
        
        $(".tagrestrict").on("keyup blur", function () {
            let reg = /<(.|\n)*?>/g;
            if (reg.test($(this).val()) == true) {
                let Input = $(this).val();
                let no_spl_char = Input.replace(reg, "");
                $(this).val(no_spl_char);
            }
        });

        function formatNumberWithPattern(num) {
            var decimalPart = (num % 1).toFixed(2).substring(1);  //fraction number
            num = num.toString().split('.')[0];
            let newstr = '';
            if (num.length > 10) {
                newstr = num.slice(0, -10) + ',';
                num = num.slice(num.length - 10, num.length);
            }
            if (num.length > 7) {
                if (newstr == '') {
                    newstr = num.slice(0, -7) + ',';
                }
                else {
                    newstr = newstr + num.slice(0, -7) + ',';
                }
                num = num.slice(num.length - 7, num.length);
            }
            if (num.length > 5) {
                if (newstr == '') {
                    newstr = num.slice(0, -5) + ',';
                }
                else {
                    newstr = newstr + num.slice(0, -5) + ',';
                }
                num = num.slice(num.length - 5, num.length);
            }
            if (num.length > 3) {
                if (newstr == '') {
                    newstr = num.slice(0, -3) + ',';
                }
                else {
                    newstr = newstr + num.slice(0, -3) + ',';
                }
                num = num.slice(num.length - 3, num.length);
            }
            if (num.length <= 3) {
                newstr = newstr + num;
            }
            newstr = '₹ ' + newstr + decimalPart;

            return newstr;
        }

        $(document).on("change", '.attach', function () {

            console.log($(this).siblings("span.remove").show())
            $(this).siblings("span.remove").show();
        });

        function removeattachfile(_this) {

            var isAnchorTagExist = false;
            //check any anchor tag is existor not
            if ($(_this).parent().find('a').length > 0) {
               
                isAnchorTagExist = true;
                var attachmentId = $(_this).parent().find('a').data('attachmentid');
                var noteId = $("#NoteModel_NoteId").val();

                var attachmentList = JSON.parse($('#AttachmentListJson').val());
                console.log("Original Attachment List:", attachmentList);

                console.log(attachmentList);
                console.log(noteId);
                console.log(attachmentId);

                $.ajax({
                    url: "/Note/RemoveAttachment",
                    type: "POST",
                    data: { NoteId: noteId, AttachmentId: attachmentId },
                    dataType: "json",
                    //contentType: "application/json",
                    success: function (data) {
                        console.log(data);
                        if (data == 1) {

                            // Filter out the removed attachment from the list
                            attachmentList = attachmentList.filter(function (att) {
                                return String(att.AttachmentId) !== String(attachmentId);
                            });

                            console.log("Updated Attachment List:", attachmentList);

                            // Serialize the updated list back to a JSON string
                            var updatedAttachmentListJson = JSON.stringify(attachmentList);
                            $('#AttachmentListJson').val(updatedAttachmentListJson);

                            AddNewFileUploader(_this, isAnchorTagExist);
                        }

                    },
                    error: function (xhr, status, error) {
                        console.error("Error in AJAX call:", error);
                    }
                });

            }
            else {
                //remove the existing upload file and add new one
                console.warn("No anchor tag found.");

                AddNewFileUploader(_this, isAnchorTagExist);
            }

        }

        function AddNewFileUploader(_this, isAnchorTagExist) {
            var lastUploadFileCount = 0;

            if (!isAnchorTagExist) {

                var inputId = $(_this).parent().find('input').attr('id');
                var spanId = $(_this).attr('id');

                $("#" + inputId).val('');
                $(_this).hide();
            } else {
                var parentDiv = $(_this).parent();

                //get the current input files
                var currentInputFileLength = $(_this).parent().parent().find('input').length;
                
                //get the current index position
                var currentIndexPosition = $(_this).closest('.row.g-4').find('.col-md-6').index($(_this).closest('.col-md-6')) + 1;

                //new div position
                var divPosition = currentInputFileLength + currentIndexPosition;

                //add the last of that position
                $(_this).parent().parent().find('.col-md-6').last().after(`<div class="col-md-6" style="display:inline-flex"><input name="NoteModel.AttachFiles" class="form-control form-control-lg attach" type="file" style="width:90%;" id="fileattach_${divPosition}"><span class="remove btn btn-outline-danger btn-sm btn-rounded" style="padding: 9px 13px 0px 13px;margin-left: 10px; display:none;" id="crossattach_${divPosition}" onclick="javascript:removeattachfile(this)"><i class='ti-close'></i></span></div>`);

                // Remove the element from the UI
                 $(_this).parent().remove();
            }
        }

    </script>
}
