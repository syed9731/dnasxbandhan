!function (t, e) { if ("object" == typeof exports && "object" == typeof module) module.exports = e(require("jquery")); else if ("function" == typeof define && define.amd) define(["jquery"], e); else { var o, n = e("object" == typeof exports ? require("jquery") : t.jQuery); for (o in n) ("object" == typeof exports ? exports : t)[o] = n[o] } }(window, function (t) { var e, o; return e = { 0: function (e, o) { e.exports = t }, 1: function (t, e, o) { "use strict"; var n = o(0), i = o.n(n); function a(t) { return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t })(t) } (function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } })(s.prototype, [{ key: "render", value: function (t) { var e, o = i()(this.markup); return this.options && this.options.contents && o.html(this.options.contents), this.options && this.options.className && o.addClass(this.options.className), this.options && this.options.data && i.a.each(this.options.data, function (t, e) { o.attr("data-" + t, e) }), this.options && this.options.click && o.on("click", this.options.click), this.children && (e = o.find(".note-children-container"), this.children.forEach(function (t) { t.render(e.length ? e : o) })), this.callback && this.callback(o, this.options), this.options && this.options.callback && this.options.callback(o), t && t.append(o), o } },]); var r = s; function s(t, e, o, n) { if (!(this instanceof s)) throw TypeError("Cannot call a class as a function"); this.markup = t, this.children = e, this.options = o, this.callback = n } e.a = { create: function (t, e) { return function () { var o = "object" === a(arguments[1]) ? arguments[1] : arguments[0], n = Array.isArray(arguments[0]) ? arguments[0] : []; return o && o.children && (n = o.children), new r(t, n, o, e) } } } }, 2: function (t, e) { (function (e) { t.exports = e }).call(this, {}) }, 3: function (t, e, o) { "use strict"; var n = o(0), i = o.n(n), n = (i.a.summernote = i.a.summernote || { lang: {} }, i.a.extend(i.a.summernote.lang, { "en-US": { font: { bold: "Bold", italic: "Italic", underline: "Underline", clear: "Remove Font Style", height: "Line Height", name: "Font Family", strikethrough: "Strikethrough", subscript: "Subscript", superscript: "Superscript", size: "Font Size", sizeunit: "Font Size Unit" }, image: { image: "Picture", insert: "Insert Image", resizeFull: "Resize full", resizeHalf: "Resize half", resizeQuarter: "Resize quarter", resizeNone: "Original size", floatLeft: "Float Left", floatRight: "Float Right", floatNone: "Remove float", shapeRounded: "Shape: Rounded", shapeCircle: "Shape: Circle", shapeThumbnail: "Shape: Thumbnail", shapeNone: "Shape: None", dragImageHere: "Drag image or text here", dropImage: "Drop image or Text", selectFromFiles: "Select from files", maximumFileSize: "Maximum file size", maximumFileSizeError: "Maximum file size exceeded.", url: "Image URL", remove: "Remove Image", original: "Original" }, video: { video: "Video", videoLink: "Video Link", insert: "Insert Video", url: "Video URL", providers: "(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)" }, link: { link: "Link", insert: "Insert Link", unlink: "Unlink", edit: "Edit", textToDisplay: "Text to display", url: "To what URL should this link go?", openInNewWindow: "Open in new window", useProtocol: "Use default protocol" }, table: { table: "Table", addRowAbove: "Add row above", addRowBelow: "Add row below", addColLeft: "Add column left", addColRight: "Add column right", delRow: "Delete row", delCol: "Delete column", delTable: "Delete table" }, hr: { insert: "Insert Horizontal Rule" }, style: { style: "Style", p: "Normal", blockquote: "Quote", pre: "Code", h1: "Header 1", h2: "Header 2", h3: "Header 3", h4: "Header 4", h5: "Header 5", h6: "Header 6" }, lists: { unordered: "Unordered list", ordered: "Ordered list" }, options: { help: "Help", fullscreen: "Full Screen", codeview: "Code View" }, paragraph: { paragraph: "Paragraph", outdent: "Outdent", indent: "Indent", left: "Align left", center: "Align center", right: "Align right", justify: "Justify full" }, color: { recent: "Recent Color", more: "More Color", background: "Background Color", foreground: "Text Color", transparent: "Transparent", setTransparent: "Set transparent", reset: "Reset", resetToDefault: "Reset to default", cpSelect: "Select" }, shortcut: { shortcuts: "Keyboard shortcuts", close: "Close", textFormatting: "Text formatting", action: "Action", paragraphFormatting: "Paragraph formatting", documentStyle: "Document Style", extraKeys: "Extra keys" }, help: { escape: "Escape", insertParagraph: "Insert Paragraph", undo: "Undo the last command", redo: "Redo the last command", tab: "Tab", untab: "Untab", bold: "Set a bold style", italic: "Set a italic style", underline: "Set a underline style", strikethrough: "Set a strikethrough style", removeFormat: "Clean a style", justifyLeft: "Set left align", justifyCenter: "Set center align", justifyRight: "Set right align", justifyFull: "Set full align", insertUnorderedList: "Toggle unordered list", insertOrderedList: "Toggle ordered list", outdent: "Outdent on current paragraph", indent: "Indent on current paragraph", formatPara: "Change current block's format as a paragraph(P tag)", formatH1: "Change current block's format as H1", formatH2: "Change current block's format as H2", formatH3: "Change current block's format as H3", formatH4: "Change current block's format as H4", formatH5: "Change current block's format as H5", formatH6: "Change current block's format as H6", insertHorizontalRule: "Insert horizontal rule", "linkDialog.show": "Show Link Dialog" }, history: { undo: "Undo", redo: "Redo" }, specialChar: { specialChar: "SPECIAL CHARACTERS", select: "Select Special characters" }, output: { noSelection: "No Selection Made!" } } }), "function" == typeof define && o(2)), a = ["sans-serif", "serif", "monospace", "cursive", "fantasy"]; function r(t) { return -1 === i.a.inArray(t.toLowerCase(), a) ? "'".concat(t, "'") : t } var o = navigator.userAgent, s = /MSIE|Trident/i.test(o), l = (s && ((l = /MSIE (\d+[.]\d+)/.exec(o)) && (tT = parseFloat(l[1])), l = /Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(o)) && (tT = parseFloat(l[1])), /Edge\/\d+/.test(o)), c = "ontouchstart" in window || 0 < navigator.MaxTouchPoints || 0 < navigator.msMaxTouchPoints, u = s ? "DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted" : "input", d = { isMac: -1 < navigator.appVersion.indexOf("Mac"), isMSIE: s, isEdge: l, isFF: !l && /firefox/i.test(o), isPhantom: /PhantomJS/i.test(o), isWebkit: !l && /webkit/i.test(o), isChrome: !l && /chrome/i.test(o), isSafari: !l && /safari/i.test(o) && !/chrome/i.test(o), browserVersion: tT, jqueryVersion: parseFloat(i.a.fn.jquery), isSupportAmd: n, isSupportTouch: c, isFontInstalled: function (t) { var e = "Comic Sans MS" === t ? "Courier New" : "Comic Sans MS", o = document.createElement("canvas").getContext("2d"), n = (o.font = "200px '" + e + "'", o.measureText("mmmmmmmmmmwwwww").width); return o.font = "200px " + r(t) + ', "' + e + '"', n !== o.measureText("mmmmmmmmmmwwwww").width }, isW3CRangeSupport: !!document.createRange, inputEventName: u, genericFontFamilies: a, validFontName: r }, h = 0, f = { eq: function (t) { return function (e) { return t === e } }, eq2: function (t, e) { return t === e }, peq2: function (t) { return function (e, o) { return e[t] === o[t] } }, ok: function () { return !0 }, fail: function () { return !1 }, self: function (t) { return t }, not: function (t) { return function () { return !t.apply(t, arguments) } }, and: function (t, e) { return function (o) { return t(o) && e(o) } }, invoke: function (t, e) { return function () { return t[e].apply(t, arguments) } }, resetUniqueId: function () { h = 0 }, uniqueId: function (t) { var e = ++h + ""; return t ? t + e : e }, rect2bnd: function (t) { var e = i()(document); return { top: t.top + e.scrollTop(), left: t.left + e.scrollLeft(), width: t.right - t.left, height: t.bottom - t.top } }, invertObject: function (t) { var e, o = {}; for (e in t) Object.prototype.hasOwnProperty.call(t, e) && (o[t[e]] = e); return o }, namespaceToCamel: function (t, e) { return (e = e || "") + t.split(".").map(function (t) { return t.substring(0, 1).toUpperCase() + t.substring(1) }).join("") }, debounce: function (t, e, o) { var n; return function () { var i = this, a = arguments, r = o && !n; clearTimeout(n), n = setTimeout(function () { n = null, o || t.apply(i, a) }, e), r && t.apply(i, a) } }, isValidUrl: function (t) { return /[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/gi.test(t) } }; function p(t) { return t[0] } function m(t) { return t[t.length - 1] } function g(t) { return t.slice(1) } function v(t, e) { if (t && t.length && e) { if (t.indexOf) return -1 !== t.indexOf(e); if (t.contains) return t.contains(e) } return !1 } var b = { head: p, last: m, initial: function (t) { return t.slice(0, t.length - 1) }, tail: g, prev: function (t, e) { return t && t.length && e && -1 !== (e = t.indexOf(e)) ? t[e - 1] : null }, next: function (t, e) { return t && t.length && e && -1 !== (e = t.indexOf(e)) ? t[e + 1] : null }, find: function (t, e) { for (var o = 0, n = t.length; o < n; o++) { var i = t[o]; if (e(i)) return i } }, contains: v, all: function (t, e) { for (var o = 0, n = t.length; o < n; o++)if (!e(t[o])) return !1; return !0 }, sum: function (t, e) { return e = e || f.self, t.reduce(function (t, o) { return t + e(o) }, 0) }, from: function (t) { for (var e = [], o = t.length, n = -1; ++n < o;)e[n] = t[n]; return e }, isEmpty: function (t) { return !t || !t.length }, clusterBy: function (t, e) { return t.length ? g(t).reduce(function (t, o) { var n = m(t); return e(m(n), o) ? n[n.length] = o : t[t.length] = [o], t }, [[t[0]]]) : [] }, compact: function (t) { for (var e = [], o = 0, n = t.length; o < n; o++)t[o] && e.push(t[o]); return e }, unique: function (t) { for (var e = [], o = 0, n = t.length; o < n; o++)v(e, t[o]) || e.push(t[o]); return e } }, y = "\xa0"; function k(t) { return t && i()(t).hasClass("note-editable") } function C(t) { return t = t.toUpperCase(), function (e) { return e && e.nodeName.toUpperCase() === t } } function w(t) { return t && 3 === t.nodeType } function x(t) { return t && /^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT|^AUDIO|^VIDEO|^EMBED/.test(t.nodeName.toUpperCase()) } function $(t) { return !k(t) && t && /^DIV|^P|^LI|^H[1-7]/.test(t.nodeName.toUpperCase()) } var s = C("PRE"), S = C("LI"), N = C("TABLE"), T = C("DATA"); function I(t) { return !(L(t) || E(t) || P(t) || $(t) || N(t) || _(t) || T(t)) } function E(t) { return t && /^UL|^OL/.test(t.nodeName.toUpperCase()) } var P = C("HR"); function R(t) { return t && /^TD|^TH/.test(t.nodeName.toUpperCase()) } var _ = C("BLOCKQUOTE"); function L(t) { return R(t) || _(t) || k(t) } var l = C("A"), o = C("BODY"), A = d.isMSIE && d.browserVersion < 11 ? "&nbsp;" : "<br>"; function F(t) { return w(t) ? t.nodeValue.length : t ? t.childNodes.length : 0 } function D(t) { var e = F(t); return 0 === e || !w(t) && 1 === e && t.innerHTML === A || !(!b.all(t.childNodes, w) || "" !== t.innerHTML) } function H(t) { x(t) || F(t) || (t.innerHTML = A) } function z(t, e) { for (; t;) { if (e(t)) return t; if (k(t)) break; t = t.parentNode } return null } function B(t, e) { e = e || f.fail; var o = []; return z(t, function (t) { return k(t) || o.push(t), e(t) }), o } function M(t, e) { e = e || f.fail; for (var o = []; t && !e(t);)o.push(t), t = t.nextSibling; return o } function O(t, e) { var o = e.nextSibling, e = e.parentNode; return o ? e.insertBefore(t, o) : e.appendChild(t), t } function U(t, e) { return i.a.each(e, function (e, o) { t.appendChild(o) }), t } function j(t) { return 0 === t.offset } function W(t) { return t.offset === F(t.node) } function K(t) { return j(t) || W(t) } function V(t, e) { for (; t && t !== e;) { if (0 !== G(t)) return !1; t = t.parentNode } return !0 } function q(t, e) { if (!e) return !1; for (; t && t !== e;) { if (G(t) !== F(t.parentNode) - 1) return !1; t = t.parentNode } return !0 } function G(t) { for (var e = 0; t = t.previousSibling;)e += 1; return e } function Y(t) { return !!(t && t.childNodes && t.childNodes.length) } function Z(t, e) { var o, n; if (0 === t.offset) { if (k(t.node)) return null; o = t.node.parentNode, n = G(t.node) } else n = Y(t.node) ? F(o = t.node.childNodes[t.offset - 1]) : (o = t.node, e ? 0 : t.offset - 1); return { node: o, offset: n } } function X(t, e) { var o; if (F(t.node) === t.offset) { if (k(t.node)) return null; var n = J(t.node), n = n ? (o = n, 0) : (o = t.node.parentNode, G(t.node) + 1) } else n = Y(t.node) ? (o = t.node.childNodes[t.offset], 0) : (o = t.node, e ? F(t.node) : t.offset + 1); return { node: o, offset: n } } function Q(t, e) { var o; if (D(t.node)) return { node: o = t.node.nextSibling, offset: i = 0 }; if (F(t.node) === t.offset) { if (k(t.node)) return null; var n = J(t.node), i = n ? (o = n, 0) : (o = t.node.parentNode, G(t.node) + 1); k(o) && (o = t.node.nextSibling, i = 0) } else if (Y(t.node)) { if (i = 0, D(o = t.node.childNodes[t.offset])) return null } else if (o = t.node, i = e ? F(t.node) : t.offset + 1, D(o)) return null; return { node: o, offset: i } } function J(t) { if (t.nextSibling && t.parent === t.nextSibling.parent) return w(t.nextSibling) ? t.nextSibling : J(t.nextSibling) } function tt(t, e) { return t.node === e.node && t.offset === e.offset } function te(t, e) { var o, n = e && e.isSkipPaddingBlankHTML, i = e && e.isNotSplitEdgePoint, e = e && e.isDiscardEmptySplits; if (e && (n = !0), K(t) && (w(t.node) || i)) { if (j(t)) return t.node; if (W(t)) return t.node.nextSibling } return w(t.node) ? t.node.splitText(t.offset) : (i = t.node.childNodes[t.offset], U(o = O(t.node.cloneNode(!1), t.node), M(i)), n || (H(t.node), H(o)), e && (D(t.node) && ti(t.node), D(o)) ? (ti(o), t.node.nextSibling) : o) } function to(t, e, o) { return (t = B(e.node, f.eq(t))).length ? 1 === t.length ? te(e, o) : t.reduce(function (t, n) { return t === e.node && (t = te(e, o)), te({ node: n, offset: t ? G(t) : F(n) }, o) }) : null } function tn(t) { return document.createElement(t) } function ti(t, e) { if (t && t.parentNode) { if (t.removeNode) return t.removeNode(e); var o = t.parentNode; if (!e) { for (var n = [], i = 0, a = t.childNodes.length; i < a; i++)n.push(t.childNodes[i]); for (var r = 0, s = n.length; r < s; r++)o.insertBefore(n[r], t) } o.removeChild(t) } } var ta = C("TEXTAREA"); function tr(t, e) { return t = ta(t[0]) ? t.val() : t.html(), e ? t.replace(/[\n\r]/g, "") : t } var ts = { NBSP_CHAR: y, ZERO_WIDTH_NBSP_CHAR: "\uFEFF", blank: A, emptyPara: "<p>".concat(A, "</p>"), makePredByNodeName: C, isEditable: k, isControlSizing: function (t) { return t && i()(t).hasClass("note-control-sizing") }, isText: w, isElement: function (t) { return t && 1 === t.nodeType }, isVoid: x, isPara: $, isPurePara: function (t) { return $(t) && !S(t) }, isHeading: function (t) { return t && /^H[1-7]/.test(t.nodeName.toUpperCase()) }, isInline: I, isBlock: f.not(I), isBodyInline: function (t) { return I(t) && !z(t, $) }, isBody: o, isParaInline: function (t) { return I(t) && !!z(t, $) }, isPre: s, isList: E, isTable: N, isData: T, isCell: R, isBlockquote: _, isBodyContainer: L, isAnchor: l, isDiv: C("DIV"), isLi: S, isBR: C("BR"), isSpan: C("SPAN"), isB: C("B"), isU: C("U"), isS: C("S"), isI: C("I"), isImg: C("IMG"), isTextarea: ta, deepestChildIsEmpty: function (t) { do if (null === t.firstElementChild || "" === t.firstElementChild.innerHTML) break; while (t = t.firstElementChild); return D(t) }, isEmpty: D, isEmptyAnchor: f.and(l, D), isClosestSibling: function (t, e) { return t.nextSibling === e || t.previousSibling === e }, withClosestSiblings: function (t, e) { e = e || f.ok; var o = []; return t.previousSibling && e(t.previousSibling) && o.push(t.previousSibling), o.push(t), t.nextSibling && e(t.nextSibling) && o.push(t.nextSibling), o }, nodeLength: F, isLeftEdgePoint: j, isRightEdgePoint: W, isEdgePoint: K, isLeftEdgeOf: V, isRightEdgeOf: q, isLeftEdgePointOf: function (t, e) { return j(t) && V(t.node, e) }, isRightEdgePointOf: function (t, e) { return W(t) && q(t.node, e) }, prevPoint: Z, nextPoint: X, nextPointWithEmptyNode: Q, isSamePoint: tt, isVisiblePoint: function (t) { var e; return !(!w(t.node) && Y(t.node) && !D(t.node) && (e = t.node.childNodes[t.offset - 1], t = t.node.childNodes[t.offset], e && !x(e) || t && !x(t))) }, prevPointUntil: function (t, e) { for (; t;) { if (e(t)) return t; t = Z(t) } return null }, nextPointUntil: function (t, e) { for (; t;) { if (e(t)) return t; t = X(t) } return null }, isCharPoint: function (t) { return !!w(t.node) && (t = t.node.nodeValue.charAt(t.offset - 1)) && " " !== t && t !== y }, isSpacePoint: function (t) { return !!w(t.node) && (" " === (t = t.node.nodeValue.charAt(t.offset - 1)) || t === y) }, walkPoint: function (t, e, o, n) { for (var i = t; i && (o(i), !tt(i, e));)i = Q(i, n && t.node !== i.node && e.node !== i.node) }, ancestor: z, singleChildAncestor: function (t, e) { for (t = t.parentNode; t && 1 === F(t);) { if (e(t)) return t; if (k(t)) break; t = t.parentNode } return null }, listAncestor: B, lastAncestor: function (t, e) { return t = B(t), b.last(t.filter(e)) }, listNext: M, listPrev: function (t, e) { e = e || f.fail; for (var o = []; t && !e(t);)o.push(t), t = t.previousSibling; return o }, listDescendant: function (t, e) { var o = []; return e = e || f.ok, function n(i) { t !== i && e(i) && o.push(i); for (var a = 0, r = i.childNodes.length; a < r; a++)n(i.childNodes[a]) }(t), o }, commonAncestor: function (t, e) { for (var o = B(t), n = e; n; n = n.parentNode)if (-1 < o.indexOf(n)) return n; return null }, wrap: function (t, e) { var o = t.parentNode, e = i()("<" + e + ">")[0]; return o.insertBefore(e, t), e.appendChild(t), e }, insertAfter: O, appendChildNodes: U, position: G, hasChildren: Y, makeOffsetPath: function (t, e) { return B(e, f.eq(t)).map(G).reverse() }, fromOffsetPath: function (t, e) { for (var o = t, n = 0, i = e.length; n < i; n++)o = o.childNodes.length <= e[n] ? o.childNodes[o.childNodes.length - 1] : o.childNodes[e[n]]; return o }, splitTree: to, splitPoint: function (t, e) { var o, n = e ? $ : L, i = B(t.node, n), a = b.last(i) || t.node, n = n(a) ? (o = i[i.length - 2], a) : (o = a).parentNode, i = o && to(o, t, { isSkipPaddingBlankHTML: e, isNotSplitEdgePoint: e }); return { rightNode: i = i || n !== t.node ? i : t.node.childNodes[t.offset], container: n } }, create: tn, createText: function (t) { return document.createTextNode(t) }, remove: ti, removeWhile: function (t, e) { for (; t && !k(t) && e(t);) { var o = t.parentNode; ti(t), t = o } }, replace: function (t, e) { return t.nodeName.toUpperCase() === e.toUpperCase() ? t : (e = tn(e), t.style.cssText && (e.style.cssText = t.style.cssText), U(e, b.from(t.childNodes)), O(e, t), ti(t), e) }, html: function (t, e) { return t = tr(t), t = e ? (t = t.replace(/<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g, function (t, e, o) { return o = o.toUpperCase(), e = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(o) && !!e, o = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(o), t + (e || o ? "\n" : "") })).trim() : t }, value: tr, posFromPlaceholder: function (t) { var t = i()(t), e = t.offset(), t = t.outerHeight(!0); return { left: e.left, top: e.top + t } }, attachEvents: function (t, e) { Object.keys(e).forEach(function (o) { t.on(o, e[o]) }) }, detachEvents: function (t, e) { Object.keys(e).forEach(function (o) { t.off(o, e[o]) }) }, isCustomStyleTag: function (t) { return t && !w(t) && b.contains(t.classList, "note-styletag") } }; (function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } })(tc.prototype, [{ key: "initialize", value: function () { return this.layoutInfo = this.ui.createLayout(this.$note), this._initialize(), this.$note.hide(), this } }, { key: "destroy", value: function () { this._destroy(), this.$note.removeData("summernote"), this.ui.removeLayout(this.$note, this.layoutInfo) } }, { key: "reset", value: function () { var t = this.isDisabled(); this.code(ts.emptyPara), this._destroy(), this._initialize(), t && this.disable() } }, { key: "_initialize", value: function () { var t = this, e = (this.options.id = f.uniqueId(i.a.now()), this.options.container = this.options.container || this.layoutInfo.editor, i.a.extend({}, this.options.buttons)), o = (Object.keys(e).forEach(function (o) { t.memo("button." + o, e[o]) }), i.a.extend({}, this.options.modules, i.a.summernote.plugins || {})); Object.keys(o).forEach(function (e) { t.module(e, o[e], !0) }), Object.keys(this.modules).forEach(function (e) { t.initializeModule(e) }) } }, { key: "_destroy", value: function () { var t = this; Object.keys(this.modules).reverse().forEach(function (e) { t.removeModule(e) }), Object.keys(this.memos).forEach(function (e) { t.removeMemo(e) }), this.triggerEvent("destroy", this) } }, { key: "code", value: function (t) { var e = this.invoke("codeview.isActivated"); if (void 0 === t) return this.invoke("codeview.sync"), e ? this.layoutInfo.codable.val() : this.layoutInfo.editable.html(); e ? this.invoke("codeview.sync", t) : this.layoutInfo.editable.html(t), this.$note.val(t), this.triggerEvent("change", t, this.layoutInfo.editable) } }, { key: "isDisabled", value: function () { return "false" === this.layoutInfo.editable.attr("contenteditable") } }, { key: "enable", value: function () { this.layoutInfo.editable.attr("contenteditable", !0), this.invoke("toolbar.activate", !0), this.triggerEvent("disable", !1), this.options.editing = !0 } }, { key: "disable", value: function () { this.invoke("codeview.isActivated") && this.invoke("codeview.deactivate"), this.layoutInfo.editable.attr("contenteditable", !1), this.options.editing = !1, this.invoke("toolbar.deactivate", !0), this.triggerEvent("disable", !0) } }, { key: "triggerEvent", value: function () { var t = b.head(arguments), e = b.tail(b.from(arguments)), o = this.options.callbacks[f.namespaceToCamel(t, "on")]; o && o.apply(this.$note[0], e), this.$note.trigger("summernote." + t, e) } }, { key: "initializeModule", value: function (t) { (t = this.modules[t]).shouldInitialize = t.shouldInitialize || f.ok, t.shouldInitialize() && (t.initialize && t.initialize(), t.events) && ts.attachEvents(this.$note, t.events) } }, { key: "module", value: function (t, e, o) { if (1 === arguments.length) return this.modules[t]; this.modules[t] = new e(this), o || this.initializeModule(t) } }, { key: "removeModule", value: function (t) { var e = this.modules[t]; e.shouldInitialize() && (e.events && ts.detachEvents(this.$note, e.events), e.destroy) && e.destroy(), delete this.modules[t] } }, { key: "memo", value: function (t, e) { if (1 === arguments.length) return this.memos[t]; this.memos[t] = e } }, { key: "removeMemo", value: function (t) { this.memos[t] && this.memos[t].destroy && this.memos[t].destroy(), delete this.memos[t] } }, { key: "createInvokeHandlerAndUpdateState", value: function (t, e) { var o = this; return function (n) { o.createInvokeHandler(t, e)(n), o.invoke("buttons.updateCurrentStyle") } } }, { key: "createInvokeHandler", value: function (t, e) { var o = this; return function (n) { n.preventDefault(), n = i()(n.target), o.invoke(t, e || n.closest("[data-value]").data("value"), n) } } }, { key: "invoke", value: function () { var t = b.head(arguments), e = b.tail(b.from(arguments)), t = t.split("."), o = 1 < t.length, n = o && b.head(t), o = o ? b.last(t) : b.head(t), t = this.modules[n || "editor"]; return !n && this[o] ? this[o].apply(this, e) : t && t[o] && t.shouldInitialize() ? t[o].apply(t, e) : void 0 } },]); var tl = tc; function tc(t, e) { if (!(this instanceof tc)) throw TypeError("Cannot call a class as a function"); this.$note = t, this.memos = {}, this.modules = {}, this.layoutInfo = {}, this.options = i.a.extend(!0, {}, e), i.a.summernote.ui = i.a.summernote.ui_template(this.options), this.ui = i.a.summernote.ui, this.initialize() } function tu(t, e) { for (var o, n = t.parentElement(), i = document.body.createTextRange(), a = b.from(n.childNodes), r = 0; r < a.length; r++)if (!ts.isText(a[r])) { if (i.moveToElementText(a[r]), 0 <= i.compareEndPoints("StartToStart", t)) break; o = a[r] } if (0 !== r && ts.isText(a[r - 1])) { var s = document.body.createTextRange(), l = null, c = (s.moveToElementText(o || n), s.collapse(!o), l = o ? o.nextSibling : n.firstChild, t.duplicate()); c.setEndPoint("StartToStart", s); for (var u = c.text.replace(/[\r\n]/g, "").length; u > l.nodeValue.length && l.nextSibling;)u -= l.nodeValue.length, l = l.nextSibling; l.nodeValue, e && l.nextSibling && ts.isText(l.nextSibling) && u === l.nodeValue.length && (u -= l.nodeValue.length, l = l.nextSibling), n = l, r = u } return { cont: n, offset: r } } function td(t) { var e = document.body.createTextRange(), t = function t(e, o) { if (ts.isText(e)) { var n = ts.listPrev(e, f.not(ts.isText)), i = b.last(n).previousSibling, a = i || e.parentNode; o += b.sum(b.tail(n), ts.nodeLength), n = !i } else { if (a = e.childNodes[o] || e, ts.isText(a)) return t(a, 0); o = 0, n = !1 } return { node: a, collapseToStart: n, offset: o } }(t.node, t.offset); return e.moveToElementText(t.node), e.collapse(t.collapseToStart), e.moveStart("character", t.offset), e } i.a.fn.extend({ summernote: function () { var t = i.a.type(b.head(arguments)), e = "string" === t, o = i.a.extend({}, i.a.summernote.options, "object" === t ? b.head(arguments) : {}), t = (o.langInfo = i.a.extend(!0, {}, i.a.summernote.lang["en-US"], i.a.summernote.lang[o.lang]), o.icons = i.a.extend(!0, {}, i.a.summernote.options.icons, o.icons), o.tooltip = "auto" === o.tooltip ? !d.isSupportTouch : o.tooltip, this.each(function (t, e) { var n, e = i()(e); e.data("summernote") || (n = new tl(e, o), e.data("summernote", n), e.data("summernote").triggerEvent("init", n.layoutInfo)) }), this.first()); if (t.length) { if (t = t.data("summernote"), e) return t.invoke.apply(t, b.from(arguments)); o.focus && t.invoke("editor.focus") } return this } }), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tg.prototype, [{ key: "nativeRange", value: function () { var t; return d.isW3CRangeSupport ? ((t = document.createRange()).setStart(this.sc, this.so), t.setEnd(this.ec, this.eo)) : (t = td({ node: this.sc, offset: this.so })).setEndPoint("EndToEnd", td({ node: this.ec, offset: this.eo })), t } }, { key: "getPoints", value: function () { return { sc: this.sc, so: this.so, ec: this.ec, eo: this.eo } } }, { key: "getStartPoint", value: function () { return { node: this.sc, offset: this.so } } }, { key: "getEndPoint", value: function () { return { node: this.ec, offset: this.eo } } }, { key: "select", value: function () { var t, e = this.nativeRange(); return d.isW3CRangeSupport ? (0 < (t = document.getSelection()).rangeCount && t.removeAllRanges(), t.addRange(e)) : e.select(), this } }, { key: "scrollIntoView", value: function (t) { var e = i()(t).height(); return t.scrollTop + e < this.sc.offsetTop && (t.scrollTop += Math.abs(t.scrollTop + e - this.sc.offsetTop)), this } }, { key: "normalize", value: function () { function t(t, e) { if (!t || ts.isVisiblePoint(t) && (!ts.isEdgePoint(t) || ts.isRightEdgePoint(t) && !e || ts.isLeftEdgePoint(t) && e || ts.isRightEdgePoint(t) && e && ts.isVoid(t.node.nextSibling) || ts.isLeftEdgePoint(t) && !e && ts.isVoid(t.node.previousSibling) || ts.isBlock(t.node) && ts.isEmpty(t.node))) return t; var o, n = ts.ancestor(t.node, ts.isBlock), i = !1, a = (i || (a = ts.prevPoint(t) || { node: null }, i = (ts.isLeftEdgePointOf(t, n) || ts.isVoid(a.node)) && !e), !1); if (a || (o = ts.nextPoint(t) || { node: null }, a = (ts.isRightEdgePointOf(t, n) || ts.isVoid(o.node)) && e), i || a) { if (ts.isVisiblePoint(t)) return t; e = !e } return (e ? ts.nextPointUntil(ts.nextPoint(t), ts.isVisiblePoint) : ts.prevPointUntil(ts.prevPoint(t), ts.isVisiblePoint)) || t } var e = t(this.getEndPoint(), !1), o = this.isCollapsed() ? e : t(this.getStartPoint(), !0); return new tg(o.node, o.offset, e.node, e.offset) } }, { key: "nodes", value: function (t, e) { t = t || f.ok; var o = e && e.includeAncestor, n = e && e.fullyContains, e = this.getStartPoint(), i = this.getEndPoint(), a = [], r = []; return ts.walkPoint(e, i, function (e) { var i; ts.isEditable(e.node) || (n ? (ts.isLeftEdgePoint(e) && r.push(e.node), ts.isRightEdgePoint(e) && b.contains(r, e.node) && (i = e.node)) : i = o ? ts.ancestor(e.node, t) : e.node, i && t(i) && a.push(i)) }, !0), b.unique(a) } }, { key: "commonAncestor", value: function () { return ts.commonAncestor(this.sc, this.ec) } }, { key: "expand", value: function (t) { var e, o = ts.ancestor(this.sc, t), t = ts.ancestor(this.ec, t); return o || t ? (e = this.getPoints(), o && (e.sc = o, e.so = 0), t && (e.ec = t, e.eo = ts.nodeLength(t)), new tg(e.sc, e.so, e.ec, e.eo)) : new tg(this.sc, this.so, this.ec, this.eo) } }, { key: "collapse", value: function (t) { return t ? new tg(this.sc, this.so, this.sc, this.so) : new tg(this.ec, this.eo, this.ec, this.eo) } }, { key: "splitText", value: function () { var t = this.sc === this.ec, e = this.getPoints(); return ts.isText(this.ec) && !ts.isEdgePoint(this.getEndPoint()) && this.ec.splitText(this.eo), ts.isText(this.sc) && !ts.isEdgePoint(this.getStartPoint()) && (e.sc = this.sc.splitText(this.so), e.so = 0, t) && (e.ec = e.sc, e.eo = this.eo - this.so), new tg(e.sc, e.so, e.ec, e.eo) } }, { key: "deleteContents", value: function () { var t, e, o, n; return this.isCollapsed() ? this : (e = (t = this.splitText()).nodes(null, { fullyContains: !0 }), o = ts.prevPointUntil(t.getStartPoint(), function (t) { return !b.contains(e, t.node) }), n = [], i.a.each(e, function (t, e) { var i = e.parentNode; o.node !== i && 1 === ts.nodeLength(i) && n.push(i), ts.remove(e, !1) }), i.a.each(n, function (t, e) { ts.remove(e, !1) }), new tg(o.node, o.offset, o.node, o.offset).normalize()) } }, { key: "makeIsOn", value: function (t) { return function () { var e = ts.ancestor(this.sc, t); return !!e && e === ts.ancestor(this.ec, t) } } }, { key: "isLeftEdgeOf", value: function (t) { return !!ts.isLeftEdgePoint(this.getStartPoint()) && (t = ts.ancestor(this.sc, t)) && ts.isLeftEdgeOf(this.sc, t) } }, { key: "isCollapsed", value: function () { return this.sc === this.ec && this.so === this.eo } }, { key: "wrapBodyInlineWithPara", value: function () { var t, e, o; return ts.isBodyContainer(this.sc) && ts.isEmpty(this.sc) ? (this.sc.innerHTML = ts.emptyPara, new tg(this.sc.firstChild, 0, this.sc.firstChild, 0)) : (o = this.normalize(), ts.isParaInline(this.sc) || ts.isPara(this.sc) ? o : (ts.isInline(o.sc) ? (e = ts.listAncestor(o.sc, f.not(ts.isInline)), t = b.last(e), ts.isInline(t) || (t = e[e.length - 2] || o.sc.childNodes[o.so])) : t = o.sc.childNodes[0 < o.so ? o.so - 1 : 0], t && (e = (e = ts.listPrev(t, ts.isParaInline).reverse()).concat(ts.listNext(t.nextSibling, ts.isParaInline))).length && (o = ts.wrap(b.head(e), "p"), ts.appendChildNodes(o, b.tail(e))), this.normalize())) } }, { key: "insertNode", value: function (t) { var e = this, e = ((ts.isText(t) || ts.isInline(t)) && (e = this.wrapBodyInlineWithPara().deleteContents()), ts.splitPoint(e.getStartPoint(), ts.isInline(t))); return e.rightNode ? (e.rightNode.parentNode.insertBefore(t, e.rightNode), ts.isEmpty(e.rightNode) && ts.isPara(t) && e.rightNode.parentNode.removeChild(e.rightNode)) : e.container.appendChild(t), t } }, { key: "pasteHTML", value: function (t) { t = i.a.trim(t); var t = i()("<div></div>").html(t)[0], t = b.from(t.childNodes), e = this, o = !1; return 0 <= e.so && (t = t.reverse(), o = !0), t = t.map(function (t) { return e.insertNode(t) }), t = o ? t.reverse() : t } }, { key: "toString", value: function () { var t = this.nativeRange(); return d.isW3CRangeSupport ? t.toString() : t.text } }, { key: "getWordRange", value: function (t) { var e, o = this.getEndPoint(); return ts.isCharPoint(o) ? (e = ts.prevPointUntil(o, function (t) { return !ts.isCharPoint(t) }), t && (o = ts.nextPointUntil(o, function (t) { return !ts.isCharPoint(t) })), new tg(e.node, e.offset, o.node, o.offset)) : this } }, { key: "getWordsRange", value: function (t) { function e(t) { return !ts.isCharPoint(t) && !ts.isSpacePoint(t) } var o, n = this.getEndPoint(); return e(n) ? this : (o = ts.prevPointUntil(n, e), t && (n = ts.nextPointUntil(n, e)), new tg(o.node, o.offset, n.node, n.offset)) } }, { key: "getWordsMatchRange", value: function (t) { var e = this.getEndPoint(), o = ts.prevPointUntil(e, function (o) { return !ts.isCharPoint(o) && !ts.isSpacePoint(o) || (o = new tg(o.node, o.offset, e.node, e.offset), (o = t.exec(o.toString())) && 0 === o.index) }), o = new tg(o.node, o.offset, e.node, e.offset), n = o.toString(), i = t.exec(n); return i && i[0].length === n.length ? o : null } }, { key: "bookmark", value: function (t) { return { s: { path: ts.makeOffsetPath(t, this.sc), offset: this.so }, e: { path: ts.makeOffsetPath(t, this.ec), offset: this.eo } } } }, { key: "paraBookmark", value: function (t) { return { s: { path: b.tail(ts.makeOffsetPath(b.head(t), this.sc)), offset: this.so }, e: { path: b.tail(ts.makeOffsetPath(b.last(t), this.ec)), offset: this.eo } } } }, { key: "getClientRects", value: function () { return this.nativeRange().getClientRects() } },]); var th = tg, tf = { create: function (t, e, o, n) { return 4 === arguments.length ? new th(t, e, o, n) : 2 === arguments.length ? new th(t, e, o = t, n = e) : (o = this.createFromSelection()) || 1 !== arguments.length ? o : (ts.isEditable(e = t) && (e = e.lastChild), this.createFromBodyElement(e, ts.emptyPara === t.innerHTML)) }, createFromBodyElement: function (t) { var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1]; return this.createFromNode(t).collapse(e) }, createFromSelection: function () { if (d.isW3CRangeSupport) { var t = document.getSelection(); if (!t || 0 === t.rangeCount || ts.isBody(t.anchorNode)) return null; var t = t.getRangeAt(0), e = t.startContainer, o = t.startOffset, n = t.endContainer, t = t.endOffset } else { var i = document.selection.createRange(), a = i.duplicate(), i = (a.collapse(!1), i.collapse(!0), tu(i, !0)), a = tu(a, !1); e = (i = ts.isText(i.node) && ts.isLeftEdgePoint(i) && ts.isTextNode(a.node) && ts.isRightEdgePoint(a) && a.node.nextSibling === i.node ? a : i).cont, o = i.offset, n = a.cont, t = a.offset } return new th(e, o, n, t) }, createFromNode: function (t) { var e = t, o = 0, n = ts.nodeLength(t); return ts.isVoid(e) && (o = ts.listPrev(e).length - 1, e = e.parentNode), ts.isBR(t) ? (n = ts.listPrev(t).length - 1, t = t.parentNode) : ts.isVoid(t) && (n = ts.listPrev(t).length, t = t.parentNode), this.create(e, o, t, n) }, createFromNodeBefore: function (t) { return this.createFromNode(t).collapse(!0) }, createFromNodeAfter: function (t) { return this.createFromNode(t).collapse() }, createFromBookmark: function (t, e) { var o = ts.fromOffsetPath(t, e.s.path), n = e.s.offset, t = ts.fromOffsetPath(t, e.e.path), e = e.e.offset; return new th(o, n, t, e) }, createFromParaBookmark: function (t, e) { var o = t.s.offset, n = t.e.offset, i = ts.fromOffsetPath(b.head(e), t.s.path), e = ts.fromOffsetPath(b.last(e), t.e.path); return new th(i, o, e, n) } }, tp = { BACKSPACE: 8, TAB: 9, ENTER: 13, ESCAPE: 27, SPACE: 32, DELETE: 46, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, NUM0: 48, NUM1: 49, NUM2: 50, NUM3: 51, NUM4: 52, NUM5: 53, NUM6: 54, NUM7: 55, NUM8: 56, B: 66, E: 69, I: 73, J: 74, K: 75, L: 76, R: 82, S: 83, U: 85, V: 86, Y: 89, Z: 90, SLASH: 191, LEFTBRACKET: 219, BACKSLASH: 220, RIGHTBRACKET: 221, HOME: 36, END: 35, PAGEUP: 33, PAGEDOWN: 34 }, tm = { isEdit: function (t) { return b.contains([tp.BACKSPACE, tp.TAB, tp.ENTER, tp.SPACE, tp.DELETE], t) }, isMove: function (t) { return b.contains([tp.LEFT, tp.UP, tp.RIGHT, tp.DOWN], t) }, isNavigation: function (t) { return b.contains([tp.HOME, tp.END, tp.PAGEUP, tp.PAGEDOWN], t) }, nameFromCode: f.invertObject(tp), code: tp }; function tg(t, e, o, n) { if (!(this instanceof tg)) throw TypeError("Cannot call a class as a function"); this.sc = t, this.so = e, this.ec = o, this.eo = n, this.isOnEditable = this.makeIsOn(ts.isEditable), this.isOnList = this.makeIsOn(ts.isList), this.isOnAnchor = this.makeIsOn(ts.isAnchor), this.isOnCell = this.makeIsOn(ts.isCell), this.isOnData = this.makeIsOn(ts.isData) } (function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } })(tb.prototype, [{ key: "makeSnapshot", value: function () { var t = tf.create(this.editable); return { contents: this.$editable.html(), bookmark: t && t.isOnEditable() ? t.bookmark(this.editable) : { s: { path: [], offset: 0 }, e: { path: [], offset: 0 } } } } }, { key: "applySnapshot", value: function (t) { null !== t.contents && this.$editable.html(t.contents), null !== t.bookmark && tf.createFromBookmark(this.editable, t.bookmark).select() } }, { key: "rewind", value: function () { this.$editable.html() !== this.stack[this.stackOffset].contents && this.recordUndo(), this.stackOffset = 0, this.applySnapshot(this.stack[this.stackOffset]) } }, { key: "commit", value: function () { this.stack = [], this.stackOffset = -1, this.recordUndo() } }, { key: "reset", value: function () { this.stack = [], this.stackOffset = -1, this.$editable.html(""), this.recordUndo() } }, { key: "undo", value: function () { this.$editable.html() !== this.stack[this.stackOffset].contents && this.recordUndo(), 0 < this.stackOffset && (this.stackOffset--, this.applySnapshot(this.stack[this.stackOffset])) } }, { key: "redo", value: function () { this.stack.length - 1 > this.stackOffset && (this.stackOffset++, this.applySnapshot(this.stack[this.stackOffset])) } }, { key: "recordUndo", value: function () { this.stackOffset++, this.stack.length > this.stackOffset && (this.stack = this.stack.slice(0, this.stackOffset)), this.stack.push(this.makeSnapshot()), this.stack.length > this.context.options.historyLimit && (this.stack.shift(), --this.stackOffset) } },]); var tv = tb; function tb(t) { if (!(this instanceof tb)) throw TypeError("Cannot call a class as a function"); this.stack = [], this.stackOffset = -1, this.context = t, this.$editable = t.layoutInfo.editable, this.editable = this.$editable[0] } (function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } })(tk.prototype, [{ key: "jQueryCSS", value: function (t, e) { var o; return d.jqueryVersion < 1.9 ? (o = {}, i.a.each(e, function (e, n) { o[n] = t.css(n) }), o) : t.css(e) } }, { key: "fromNode", value: function (t) { var e = this.jQueryCSS(t, ["font-family", "font-size", "text-align", "list-style-type", "line-height"]) || {}, t = t[0].style.fontSize || e["font-size"]; return e["font-size"] = parseInt(t, 10), e["font-size-unit"] = t.match(/[a-z%]+$/), e } }, { key: "stylePara", value: function (t, e) { i.a.each(t.nodes(ts.isPara, { includeAncestor: !0 }), function (t, o) { i()(o).css(e) }) } }, { key: "styleNodes", value: function (t, e) { t = t.splitText(); var o, n, a, r = e && e.nodeName || "SPAN", s = !(!e || !e.expandClosestSibling), e = !(!e || !e.onlyPartialContains); return t.isCollapsed() ? [t.insertNode(ts.create(r))] : (a = ts.makePredByNodeName(r), o = t.nodes(ts.isText, { fullyContains: !0 }).map(function (t) { return ts.singleChildAncestor(t, a) || ts.wrap(t, r) }), s ? (e && (n = t.nodes(), a = f.and(a, function (t) { return b.contains(n, t) })), o.map(function (t) { var t = ts.withClosestSiblings(t, a), e = b.head(t), o = b.tail(t); return i.a.each(o, function (t, o) { ts.appendChildNodes(e, o.childNodes), ts.remove(o) }), b.head(t) })) : o) } }, { key: "current", value: function (t) { var e = i()(ts.isElement(t.sc) ? t.sc : t.sc.parentNode), e = this.fromNode(e); try { e = i.a.extend(e, { "font-bold": document.queryCommandState("bold") ? "bold" : "normal", "font-italic": document.queryCommandState("italic") ? "italic" : "normal", "font-underline": document.queryCommandState("underline") ? "underline" : "normal", "font-subscript": document.queryCommandState("subscript") ? "subscript" : "normal", "font-superscript": document.queryCommandState("superscript") ? "superscript" : "normal", "font-strikethrough": document.queryCommandState("strikethrough") ? "strikethrough" : "normal", "font-family": document.queryCommandValue("fontname") || e["font-family"] }) } catch (o) { } t.isOnList() ? (n = -1 < ["circle", "disc", "disc-leading-zero", "square"].indexOf(e["list-style-type"]), e["list-style"] = n ? "unordered" : "ordered") : e["list-style"] = "none"; var n = ts.ancestor(t.sc, ts.isPara); return n && n.style["line-height"] ? e["line-height"] = n.style.lineHeight : (n = parseInt(e["line-height"], 10) / parseInt(e["font-size"], 10), e["line-height"] = n.toFixed(1)), e.anchor = t.isOnAnchor() && ts.ancestor(t.sc, ts.isAnchor), e.ancestors = ts.listAncestor(t.sc, ts.isEditable), e.range = t, e } },]); var ty = tk; function tk() { if (!(this instanceof tk)) throw TypeError("Cannot call a class as a function") } (function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } })(tw.prototype, [{ key: "insertOrderedList", value: function (t) { this.toggleList("OL", t) } }, { key: "insertUnorderedList", value: function (t) { this.toggleList("UL", t) } }, { key: "indent", value: function (t) { var e = this, t = tf.create(t).wrapBodyInlineWithPara(), o = t.nodes(ts.isPara, { includeAncestor: !0 }), o = b.clusterBy(o, f.peq2("parentNode")); i.a.each(o, function (t, o) { var n, a = b.head(o); ts.isLi(a) ? (n = e.findList(a.previousSibling)) ? o.map(function (t) { return n.appendChild(t) }) : (e.wrapList(o, a.parentNode.nodeName), o.map(function (t) { return t.parentNode }).map(function (t) { return e.appendToPrevious(t) })) : i.a.each(o, function (t, e) { i()(e).css("marginLeft", function (t, e) { return (parseInt(e, 10) || 0) + 25 }) }) }), t.select() } }, { key: "outdent", value: function (t) { var e = this, t = tf.create(t).wrapBodyInlineWithPara(), o = t.nodes(ts.isPara, { includeAncestor: !0 }), o = b.clusterBy(o, f.peq2("parentNode")); i.a.each(o, function (t, o) { var n = b.head(o); ts.isLi(n) ? e.releaseList([o]) : i.a.each(o, function (t, e) { i()(e).css("marginLeft", function (t, e) { return 25 < (e = parseInt(e, 10) || 0) ? e - 25 : "" }) }) }), t.select() } }, { key: "toggleList", value: function (t, e) { var o, n = this, e = tf.create(e).wrapBodyInlineWithPara(), a = e.nodes(ts.isPara, { includeAncestor: !0 }), r = e.paraBookmark(a), s = b.clusterBy(a, f.peq2("parentNode")); b.find(a, ts.isPurePara) ? (o = [], i.a.each(s, function (e, i) { o = o.concat(n.wrapList(i, t)) }), a = o) : (e = e.nodes(ts.isList, { includeAncestor: !0 }).filter(function (e) { return !i.a.nodeName(e, t) })).length ? i.a.each(e, function (e, o) { ts.replace(o, t) }) : a = this.releaseList(s, !0), tf.createFromParaBookmark(r, a).select() } }, { key: "wrapList", value: function (t, e) { var o = b.head(t), n = b.last(t), o = ts.isList(o.previousSibling) && o.previousSibling, i = ts.isList(n.nextSibling) && n.nextSibling, o = o || ts.insertAfter(ts.create(e || "UL"), n); return t = t.map(function (t) { return ts.isPurePara(t) ? ts.replace(t, "LI") : t }), ts.appendChildNodes(o, t), i && (ts.appendChildNodes(o, b.from(i.childNodes)), ts.remove(i)), t } }, { key: "releaseList", value: function (t, e) { var o = this, n = []; return i.a.each(t, function (t, a) { var r = b.head(a), s = b.last(a), l = e ? ts.lastAncestor(r, ts.isList) : r.parentNode, c = l.parentNode; "LI" === l.parentNode.nodeName ? (a.map(function (t) { var e = o.findNextSiblings(t); c.nextSibling ? c.parentNode.insertBefore(t, c.nextSibling) : c.parentNode.appendChild(t), e.length && (o.wrapList(e, l.nodeName), t.appendChild(e[0].parentNode)) }), 0 === l.children.length && c.removeChild(l), 0 === c.childNodes.length && c.parentNode.removeChild(c)) : (s = 1 < l.childNodes.length ? ts.splitTree(l, { node: s.parentNode, offset: ts.position(s) + 1 }, { isSkipPaddingBlankHTML: !0 }) : null, r = ts.splitTree(l, { node: r.parentNode, offset: ts.position(r) }, { isSkipPaddingBlankHTML: !0 }), a = e ? ts.listDescendant(r, ts.isLi) : b.from(r.childNodes).filter(ts.isLi), !e && ts.isList(l.parentNode) || (a = a.map(function (t) { return ts.replace(t, "P") })), i.a.each(b.from(a).reverse(), function (t, e) { ts.insertAfter(e, l) }), r = b.compact([l, r, s]), i.a.each(r, function (t, e) { e = [e].concat(ts.listDescendant(e, ts.isList)), i.a.each(e.reverse(), function (t, e) { ts.nodeLength(e) || ts.remove(e, !0) }) })), n = n.concat(a) }), n } }, { key: "appendToPrevious", value: function (t) { return t.previousSibling ? ts.appendChildNodes(t.previousSibling, [t]) : this.wrapList([t], "LI") } }, { key: "findList", value: function (t) { return t ? b.find(t.children, function (t) { return -1 < ["OL", "UL"].indexOf(t.nodeName) }) : null } }, { key: "findNextSiblings", value: function (t) { for (var e = []; t.nextSibling;)e.push(t.nextSibling), t = t.nextSibling; return e } },]); var tC = tw; function tw() { if (!(this instanceof tw)) throw TypeError("Cannot call a class as a function") } (function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } })(t$.prototype, [{ key: "insertTab", value: function (t, e) { var o = ts.createText(Array(e + 1).join(ts.NBSP_CHAR)); (t = t.deleteContents()).insertNode(o, !0), (t = tf.create(o, e)).select() } }, { key: "insertParagraph", value: function (t, e) { e = (e = (e = e || tf.create(t)).deleteContents()).wrapBodyInlineWithPara(); var o = ts.ancestor(e.sc, ts.isPara); if (o) { if (ts.isLi(o) && (ts.isEmpty(o) || ts.deepestChildIsEmpty(o))) return void this.bullet.toggleList(o.parentNode.nodeName); var n, a, r = null; 1 === this.options.blockquoteBreakingLevel ? r = ts.ancestor(o, ts.isBlockquote) : 2 === this.options.blockquoteBreakingLevel && (r = ts.lastAncestor(o, ts.isBlockquote)), r ? (n = i()(ts.emptyPara)[0], ts.isRightEdgePoint(e.getStartPoint()) && ts.isBR(e.sc.nextSibling) && i()(e.sc.nextSibling).remove(), (a = ts.splitTree(r, e.getStartPoint(), { isDiscardEmptySplits: !0 })) ? a.parentNode.insertBefore(n, a) : ts.insertAfter(n, r)) : (n = ts.splitTree(o, e.getStartPoint()), a = (a = ts.listDescendant(o, ts.isEmptyAnchor)).concat(ts.listDescendant(n, ts.isEmptyAnchor)), i.a.each(a, function (t, e) { ts.remove(e) }), (ts.isHeading(n) || ts.isPre(n) || ts.isCustomStyleTag(n)) && ts.isEmpty(n) && (n = ts.replace(n, "p"))) } else r = e.sc.childNodes[e.so], n = i()(ts.emptyPara)[0], r ? e.sc.insertBefore(n, r) : e.sc.appendChild(n); tf.create(n, 0).normalize().select().scrollIntoView(t) } },]); var tx = t$; function t$(t) { if (!(this instanceof t$)) throw TypeError("Cannot call a class as a function"); this.bullet = new tC, this.options = t.options } function tS(t, e, o, n) { var i = { colPos: 0, rowPos: 0 }, a = [], r = []; function s(t, e, o, n, i, r, s) { o = { baseRow: o, baseCell: n, isRowSpan: i, isColSpan: r, isVirtual: s }, a[t] || (a[t] = []), a[t][e] = o } function l(t, e) { if (!a[t] || !a[t][e]) return e; for (var o = e; a[t][o];)if (!a[t][++o]) return o } function c(t, e, o, n) { t === i.rowPos && i.colPos >= o.cellIndex && o.cellIndex <= e && !n && i.colPos++ } this.getActionList = function () { for (var t = e === tS.where.Row ? i.rowPos : -1, n = e === tS.where.Column ? i.colPos : -1, s = 0, l = !0; l;) { var c = 0 <= t ? t : s, u = 0 <= n ? n : s, d = a[c]; if (!d) return l = !1, r; var h = d[u]; if (!h) return l = !1, r; var f = tS.resultAction.Ignore; switch (o) { case tS.requestAction.Add: f = function (t) { switch (e) { case tS.where.Column: if (t.isColSpan) return tS.resultAction.SumSpanCount; if (t.isRowSpan && t.isVirtual) return tS.resultAction.Ignore; break; case tS.where.Row: if (t.isRowSpan) return tS.resultAction.SumSpanCount; if (t.isColSpan && t.isVirtual) return tS.resultAction.Ignore }return tS.resultAction.AddCell }(h); break; case tS.requestAction.Delete: f = function (t) { switch (e) { case tS.where.Column: if (t.isColSpan) return tS.resultAction.SubtractSpanCount; break; case tS.where.Row: if (!t.isVirtual && t.isRowSpan) return tS.resultAction.AddCell; if (t.isRowSpan) return tS.resultAction.SubtractSpanCount }return tS.resultAction.RemoveCell }(h) }r.push((d = f, { baseCell: h.baseCell, action: d, virtualTable: { rowIndex: c, cellIndex: u } })), s++ } return r }, t && t.tagName && ("td" === t.tagName.toLowerCase() || "th" === t.tagName.toLowerCase()) && (i.colPos = t.cellIndex, t.parentElement) && t.parentElement.tagName && "tr" === t.parentElement.tagName.toLowerCase() && (i.rowPos = t.parentElement.rowIndex); for (var u = n.rows, d = 0; d < u.length; d++)for (var h = u[d].cells, f = 0; f < h.length; f++) { p = void 0, m = void 0, g = void 0, v = void 0, b = void 0, y = void 0, k = void 0, C = void 0, w = void 0, x = void 0, $ = void 0, S = void 0; var p = u[d], m = h[f], g = l(p.rowIndex, m.cellIndex), v = 1 < m.colSpan, b = 1 < m.rowSpan, y = p.rowIndex === i.rowPos && m.cellIndex === i.colPos, k = (s(p.rowIndex, g, p, m, b, v, !1), m.attributes.rowSpan ? parseInt(m.attributes.rowSpan.value, 10) : 0); if (1 < k) for (var C = 1; C < k; C++) { var w = p.rowIndex + C; c(w, g, m, y), s(w, g, p, m, !0, v, !0) } var x = m.attributes.colSpan ? parseInt(m.attributes.colSpan.value, 10) : 0; if (1 < x) for (var $ = 1; $ < x; $++) { var S = l(p.rowIndex, g + $); c(p.rowIndex, S, m, y), s(p.rowIndex, S, p, m, b, !0, !0) } } } tS.where = { Row: 0, Column: 1 }, tS.requestAction = { Add: 0, Delete: 1 }, tS.resultAction = { Ignore: 0, SubtractSpanCount: 1, RemoveCell: 2, AddCell: 3, SumSpanCount: 4 }, function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tN.prototype, [{ key: "tab", value: function (t, e) { var t = ts.ancestor(t.commonAncestor(), ts.isCell), o = ts.ancestor(t, ts.isTable), o = ts.listDescendant(o, ts.isCell), e = b[e ? "prev" : "next"](o, t); e && tf.create(e, 0).select() } }, { key: "addRow", value: function (t, e) { for (var t = ts.ancestor(t.commonAncestor(), ts.isCell), o = i()(t).closest("tr"), n = this.recoverAttributes(o), a = i()("<tr" + n + "></tr>"), r = new tS(t, tS.where.Row, tS.requestAction.Add, i()(o).closest("table")[0]).getActionList(), s = 0; s < r.length; s++) { var l, c = r[s], u = this.recoverAttributes(c.baseCell); switch (c.action) { case tS.resultAction.AddCell: a.append("<td" + u + ">" + ts.blank + "</td>"); break; case tS.resultAction.SumSpanCount: "top" === e && (c.baseCell.parent ? c.baseCell.closest("tr").rowIndex : 0) <= o[0].rowIndex ? (l = i()("<div></div>").append(i()("<td" + u + ">" + ts.blank + "</td>").removeAttr("rowspan")).html(), a.append(l)) : (l = parseInt(c.baseCell.rowSpan, 10), l++, c.baseCell.setAttribute("rowSpan", l)) } } "top" === e ? o.before(a) : 1 < t.rowSpan ? (n = o[0].rowIndex + (t.rowSpan - 2), i()(i()(o).parent().find("tr")[n]).after(i()(a))) : o.after(a) } }, { key: "addCol", value: function (t, e) { var t = ts.ancestor(t.commonAncestor(), ts.isCell), o = i()(t).closest("tr"); i()(o).siblings().push(o); for (var n = new tS(t, tS.where.Column, tS.requestAction.Add, i()(o).closest("table")[0]).getActionList(), a = 0; a < n.length; a++) { var r, s = n[a], l = this.recoverAttributes(s.baseCell); switch (s.action) { case tS.resultAction.AddCell: "right" === e ? i()(s.baseCell).after("<td" + l + ">" + ts.blank + "</td>") : i()(s.baseCell).before("<td" + l + ">" + ts.blank + "</td>"); break; case tS.resultAction.SumSpanCount: "right" === e ? (r = parseInt(s.baseCell.colSpan, 10), r++, s.baseCell.setAttribute("colSpan", r)) : i()(s.baseCell).before("<td" + l + ">" + ts.blank + "</td>") } } } }, { key: "recoverAttributes", value: function (t) { var e = ""; if (t) for (var o = t.attributes || [], n = 0; n < o.length; n++)"id" !== o[n].name.toLowerCase() && o[n].specified && (e += " " + o[n].name + "='" + o[n].value + "'"); return e } }, { key: "deleteRow", value: function (t) { for (var t = ts.ancestor(t.commonAncestor(), ts.isCell), e = i()(t).closest("tr"), o = e.children("td, th").index(i()(t)), n = e[0].rowIndex, a = new tS(t, tS.where.Row, tS.requestAction.Delete, i()(e).closest("table")[0]).getActionList(), r = 0; r < a.length; r++)if (a[r]) { var s = a[r].baseCell, l = a[r].virtualTable, c = s.rowSpan && 1 < s.rowSpan, u = c ? parseInt(s.rowSpan, 10) : 0; switch (a[r].action) { case tS.resultAction.Ignore: continue; case tS.resultAction.AddCell: var d = e.next("tr")[0]; if (!d) continue; var h = e[0].cells[o]; c && (2 < u ? (u--, d.insertBefore(h, d.cells[o]), d.cells[o].setAttribute("rowSpan", u), d.cells[o].innerHTML = "") : 2 === u && (d.insertBefore(h, d.cells[o]), d.cells[o].removeAttribute("rowSpan"), d.cells[o].innerHTML = "")); continue; case tS.resultAction.SubtractSpanCount: c && (2 < u ? (u--, s.setAttribute("rowSpan", u), l.rowIndex !== n && s.cellIndex === o && (s.innerHTML = "")) : 2 === u && (s.removeAttribute("rowSpan"), l.rowIndex !== n) && s.cellIndex === o && (s.innerHTML = "")); continue; case tS.resultAction.RemoveCell: continue } } e.remove() } }, { key: "deleteCol", value: function (t) { for (var t = ts.ancestor(t.commonAncestor(), ts.isCell), e = i()(t).closest("tr"), o = e.children("td, th").index(i()(t)), n = new tS(t, tS.where.Column, tS.requestAction.Delete, i()(e).closest("table")[0]).getActionList(), a = 0; a < n.length; a++)if (n[a]) switch (n[a].action) { case tS.resultAction.Ignore: continue; case tS.resultAction.SubtractSpanCount: var r, s = n[a].baseCell; s.colSpan && 1 < s.colSpan && (2 < (r = s.colSpan ? parseInt(s.colSpan, 10) : 0) ? (r--, s.setAttribute("colSpan", r), s.cellIndex === o && (s.innerHTML = "")) : 2 === r && (s.removeAttribute("colSpan"), s.cellIndex === o) && (s.innerHTML = "")); continue; case tS.resultAction.RemoveCell: ts.remove(n[a].baseCell, !0); continue } } }, { key: "createTable", value: function (t, e, o) { for (var n = [], a = 0; a < t; a++)n.push("<td>" + ts.blank + "</td>"); for (var r = n.join(""), s = [], l = 0; l < e; l++)s.push("<tr>" + r + "</tr>"); var c = s.join(""), c = i()("<table>" + c + "</table>"); return o && o.tableClassName && c.addClass(o.tableClassName), c[0] } }, { key: "deleteTable", value: function (t) { t = ts.ancestor(t.commonAncestor(), ts.isCell), i()(t).closest("table").remove() } },]); var t9 = tN; function tN() { if (!(this instanceof tN)) throw TypeError("Cannot call a class as a function") } (function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } })(tI.prototype, [{ key: "initialize", value: function () { var t = this; this.$editable.on("keydown", function (e) { if (e.keyCode === tm.code.ENTER && t.context.triggerEvent("enter", e), t.context.triggerEvent("keydown", e), t.snapshot = t.history.makeSnapshot(), t.hasKeyShortCut = !1, e.isDefaultPrevented() || (t.options.shortcuts ? t.hasKeyShortCut = t.handleKeyMap(e) : t.preventDefaultEditableShortCuts(e)), t.isLimited(1, e) && (e = t.getLastRange()).eo - e.so == 0) return !1; t.setLastRange(), t.options.recordEveryKeystroke && !1 === t.hasKeyShortCut && t.history.recordUndo() }).on("keyup", function (e) { t.setLastRange(), t.context.triggerEvent("keyup", e) }).on("focus", function (e) { t.setLastRange(), t.context.triggerEvent("focus", e) }).on("blur", function (e) { t.context.triggerEvent("blur", e) }).on("mousedown", function (e) { t.context.triggerEvent("mousedown", e) }).on("mouseup", function (e) { t.setLastRange(), t.history.recordUndo(), t.context.triggerEvent("mouseup", e) }).on("scroll", function (e) { t.context.triggerEvent("scroll", e) }).on("paste", function (e) { t.setLastRange(), t.context.triggerEvent("paste", e) }).on("input", function () { t.isLimited(0) && t.snapshot && t.history.applySnapshot(t.snapshot) }), this.$editable.attr("spellcheck", this.options.spellCheck), this.$editable.attr("autocorrect", this.options.spellCheck), this.options.disableGrammar && this.$editable.attr("data-gramm", !1), this.$editable.html(ts.html(this.$note) || ts.emptyPara), this.$editable.on(d.inputEventName, f.debounce(function () { t.context.triggerEvent("change", t.$editable.html(), t.$editable) }, 10)), this.$editable.on("focusin", function (e) { t.context.triggerEvent("focusin", e) }).on("focusout", function (e) { t.context.triggerEvent("focusout", e) }), this.options.airMode ? this.options.overrideContextMenu && this.$editor.on("contextmenu", function (e) { return t.context.triggerEvent("contextmenu", e), !1 }) : (this.options.width && this.$editor.outerWidth(this.options.width), this.options.height && this.$editable.outerHeight(this.options.height), this.options.maxHeight && this.$editable.css("max-height", this.options.maxHeight), this.options.minHeight && this.$editable.css("min-height", this.options.minHeight)), this.history.recordUndo(), this.setLastRange() } }, { key: "destroy", value: function () { this.$editable.off() } }, { key: "handleKeyMap", value: function (t) { var e = this.options.keyMap[d.isMac ? "mac" : "pc"], o = [], n = (t.metaKey && o.push("CMD"), t.ctrlKey && !t.altKey && o.push("CTRL"), t.shiftKey && o.push("SHIFT"), tm.nameFromCode[t.keyCode]), e = (n && o.push(n), e[o.join("+")]); if ("TAB" !== n || this.options.tabDisable) { if (e) { if (!1 !== this.context.invoke(e)) return t.preventDefault(), !0 } else tm.isEdit(t.keyCode) && this.afterCommand() } else this.afterCommand(); return !1 } }, { key: "preventDefaultEditableShortCuts", value: function (t) { (t.ctrlKey || t.metaKey) && b.contains([66, 73, 85], t.keyCode) && t.preventDefault() } }, { key: "isLimited", value: function (t, e) { return t = t || 0, (void 0 === e || !(tm.isMove(e.keyCode) || tm.isNavigation(e.keyCode) || e.ctrlKey || e.metaKey || b.contains([tm.code.BACKSPACE, tm.code.DELETE], e.keyCode))) && 0 < this.options.maxTextLength && this.$editable.text().length + t > this.options.maxTextLength } }, { key: "createRange", value: function () { return this.focus(), this.setLastRange(), this.getLastRange() } }, { key: "createRangeFromList", value: function (t) { var e = tf.createFromNodeBefore(b.head(t)).getStartPoint(), t = tf.createFromNodeAfter(b.last(t)).getEndPoint(); return tf.create(e.node, e.offset, t.node, t.offset) } }, { key: "setLastRange", value: function (t) { t ? this.lastRange = t : (this.lastRange = tf.create(this.editable), 0 === i()(this.lastRange.sc).closest(".note-editable").length && (this.lastRange = tf.createFromBodyElement(this.editable))) } }, { key: "getLastRange", value: function () { return this.lastRange || this.setLastRange(), this.lastRange } }, { key: "saveRange", value: function (t) { t && this.getLastRange().collapse().select() } }, { key: "restoreRange", value: function () { this.lastRange && (this.lastRange.select(), this.focus()) } }, { key: "saveTarget", value: function (t) { this.$editable.data("target", t) } }, { key: "clearTarget", value: function () { this.$editable.removeData("target") } }, { key: "restoreTarget", value: function () { return this.$editable.data("target") } }, { key: "currentStyle", value: function () { var t = tf.create(); return (t = t && t.normalize()) ? this.style.current(t) : this.style.fromNode(this.$editable) } }, { key: "styleFromNode", value: function (t) { return this.style.fromNode(t) } }, { key: "undo", value: function () { this.context.triggerEvent("before.command", this.$editable.html()), this.history.undo(), this.context.triggerEvent("change", this.$editable.html(), this.$editable) } }, { key: "commit", value: function () { this.context.triggerEvent("before.command", this.$editable.html()), this.history.commit(), this.context.triggerEvent("change", this.$editable.html(), this.$editable) } }, { key: "redo", value: function () { this.context.triggerEvent("before.command", this.$editable.html()), this.history.redo(), this.context.triggerEvent("change", this.$editable.html(), this.$editable) } }, { key: "beforeCommand", value: function () { this.context.triggerEvent("before.command", this.$editable.html()), document.execCommand("styleWithCSS", !1, this.options.styleWithCSS), this.focus() } }, { key: "afterCommand", value: function (t) { this.normalizeContent(), this.history.recordUndo(), t || this.context.triggerEvent("change", this.$editable.html(), this.$editable) } }, { key: "tab", value: function () { var t = this.getLastRange(); if (t.isCollapsed() && t.isOnCell()) this.table.tab(t); else { if (0 === this.options.tabSize) return !1; this.isLimited(this.options.tabSize) || (this.beforeCommand(), this.typing.insertTab(t, this.options.tabSize), this.afterCommand()) } } }, { key: "untab", value: function () { var t = this.getLastRange(); if (t.isCollapsed() && t.isOnCell()) this.table.tab(t, !0); else if (0 === this.options.tabSize) return !1 } }, { key: "wrapCommand", value: function (t) { return function () { this.beforeCommand(), t.apply(this, arguments), this.afterCommand() } } }, { key: "insertImage", value: function (t, e) { var o = this, n = t; return i.a.Deferred(function (t) { var e = i()("<img>"); e.one("load", function () { e.off("error abort"), t.resolve(e) }).one("error abort", function () { e.off("load").detach(), t.reject(e) }).css({ display: "none" }).appendTo(document.body).attr("src", n) }).promise().then(function (t) { o.beforeCommand(), "function" == typeof e ? e(t) : ("string" == typeof e && t.attr("data-filename", e), t.css("width", Math.min(o.$editable.width(), t.width()))), t.show(), o.getLastRange().insertNode(t[0]), o.setLastRange(tf.createFromNodeAfter(t[0]).select()), o.afterCommand() }).fail(function (t) { o.context.triggerEvent("image.upload.error", t) }) } }, { key: "insertImagesAsDataURL", value: function (t) { var e = this; i.a.each(t, function (t, o) { var n, a = o.name; e.options.maximumImageFileSize && e.options.maximumImageFileSize < o.size ? e.context.triggerEvent("image.upload.error", e.lang.image.maximumFileSizeError) : (n = o, i.a.Deferred(function (t) { i.a.extend(new FileReader, { onload: function (e) { e = e.target.result, t.resolve(e) }, onerror: function (e) { t.reject(e) } }).readAsDataURL(n) }).promise().then(function (t) { return e.insertImage(t, a) }).fail(function () { e.context.triggerEvent("image.upload.error") })) }) } }, { key: "insertImagesOrCallback", value: function (t) { this.options.callbacks.onImageUpload ? this.context.triggerEvent("image.upload", t) : this.insertImagesAsDataURL(t) } }, { key: "getSelectedText", value: function () { var t = this.getLastRange(); return (t = t.isOnAnchor() ? tf.createFromNode(ts.ancestor(t.sc, ts.isAnchor)) : t).toString() } }, { key: "onFormatBlock", value: function (t, e) { var o; document.execCommand("FormatBlock", !1, d.isMSIE ? "<" + t + ">" : t), e && e.length && (e = e[0].tagName.toUpperCase() !== t.toUpperCase() ? e.find(t) : e) && e.length && (e = e[0].className || "") && (o = this.createRange(), i()([o.sc, o.ec]).closest(t).addClass(e)) } }, { key: "formatPara", value: function () { this.formatBlock("P") } }, { key: "fontStyling", value: function (t, e) { var o, n, a = this.getLastRange(); "" !== a ? (o = this.style.styleNodes(a), this.$editor.find(".note-status-output").html(""), i()(o).css(t, e), a.isCollapsed() ? (t = b.head(o)) && !ts.nodeLength(t) && (t.innerHTML = ts.ZERO_WIDTH_NBSP_CHAR, tf.createFromNode(t.firstChild).select(), this.setLastRange(), this.$editable.data("bogus", t)) : this.setLastRange(this.createRangeFromList(o).select())) : (n = i.a.now(), this.$editor.find(".note-status-output").html('<div id="note-status-output-' + n + '" class="alert alert-info">' + this.lang.output.noSelection + "</div>"), setTimeout(function () { i()("#note-status-output-" + n).remove() }, 5e3)) } }, { key: "unlink", value: function () { var t, e = this.getLastRange(); e.isOnAnchor() && (t = ts.ancestor(e.sc, ts.isAnchor), (e = tf.createFromNode(t)).select(), this.setLastRange(), this.beforeCommand(), document.execCommand("unlink"), this.afterCommand()) } }, { key: "getLinkInfo", value: function () { var t = this.getLastRange().expand(ts.isAnchor), e = i()(b.head(t.nodes(ts.isAnchor))), t = { range: t, text: t.toString(), url: e.length ? e.attr("href") : "" }; return e.length && (t.isNewWindow = "_blank" === e.attr("target")), t } }, { key: "addRow", value: function (t) { var e = this.getLastRange(this.$editable); e.isCollapsed() && e.isOnCell() && (this.beforeCommand(), this.table.addRow(e, t), this.afterCommand()) } }, { key: "addCol", value: function (t) { var e = this.getLastRange(this.$editable); e.isCollapsed() && e.isOnCell() && (this.beforeCommand(), this.table.addCol(e, t), this.afterCommand()) } }, { key: "deleteRow", value: function () { var t = this.getLastRange(this.$editable); t.isCollapsed() && t.isOnCell() && (this.beforeCommand(), this.table.deleteRow(t), this.afterCommand()) } }, { key: "deleteCol", value: function () { var t = this.getLastRange(this.$editable); t.isCollapsed() && t.isOnCell() && (this.beforeCommand(), this.table.deleteCol(t), this.afterCommand()) } }, { key: "deleteTable", value: function () { var t = this.getLastRange(this.$editable); t.isCollapsed() && t.isOnCell() && (this.beforeCommand(), this.table.deleteTable(t), this.afterCommand()) } }, { key: "resizeTo", value: function (t, e, o) { var n; o = o ? { width: (o = t.y / t.x) < (n = e.data("ratio")) ? t.x : t.y / n, height: o < n ? t.x * n : t.y } : { width: t.x, height: t.y }, e.css(o) } }, { key: "hasFocus", value: function () { return this.$editable.is(":focus") } }, { key: "focus", value: function () { this.hasFocus() || this.$editable.focus() } }, { key: "isEmpty", value: function () { return ts.isEmpty(this.$editable[0]) || ts.emptyPara === this.$editable.html() } }, { key: "empty", value: function () { this.context.invoke("code", ts.emptyPara) } }, { key: "normalizeContent", value: function () { this.$editable[0].normalize() } },]); var tT = tI; function tI(t) { var e = this; if (!(this instanceof tI)) throw TypeError("Cannot call a class as a function"); this.context = t, this.$note = t.layoutInfo.note, this.$editor = t.layoutInfo.editor, this.$editable = t.layoutInfo.editable, this.options = t.options, this.lang = this.options.langInfo, this.editable = this.$editable[0], this.lastRange = null, this.snapshot = null, this.style = new ty, this.table = new t9, this.typing = new tx(t), this.bullet = new tC, this.history = new tv(t), this.context.memo("help.escape", this.lang.help.escape), this.context.memo("help.undo", this.lang.help.undo), this.context.memo("help.redo", this.lang.help.redo), this.context.memo("help.tab", this.lang.help.tab), this.context.memo("help.untab", this.lang.help.untab), this.context.memo("help.insertParagraph", this.lang.help.insertParagraph), this.context.memo("help.insertOrderedList", this.lang.help.insertOrderedList), this.context.memo("help.insertUnorderedList", this.lang.help.insertUnorderedList), this.context.memo("help.indent", this.lang.help.indent), this.context.memo("help.outdent", this.lang.help.outdent), this.context.memo("help.formatPara", this.lang.help.formatPara), this.context.memo("help.insertHorizontalRule", this.lang.help.insertHorizontalRule), this.context.memo("help.fontName", this.lang.help.fontName); for (var o = ["bold", "italic", "underline", "strikethrough", "superscript", "subscript", "justifyLeft", "justifyCenter", "justifyRight", "justifyFull", "formatBlock", "removeFormat", "backColor"], n = 0, a = o.length; n < a; n++)this[o[n]] = function (t) { return function (o) { e.beforeCommand(), document.execCommand(t, !1, o), e.afterCommand(!0) } }(o[n]), this.context.memo("help." + o[n], this.lang.help[o[n]]); this.fontName = this.wrapCommand(function (t) { return e.fontStyling("font-family", d.validFontName(t)) }), this.fontSize = this.wrapCommand(function (t) { var o = e.currentStyle()["font-size-unit"]; return e.fontStyling("font-size", t + o) }), this.fontSizeUnit = this.wrapCommand(function (t) { var o = e.currentStyle()["font-size"]; return e.fontStyling("font-size", o + t) }); for (var r = 1; r <= 6; r++)this["formatH" + r] = function (t) { return function () { e.formatBlock("H" + t) } }(r), this.context.memo("help.formatH" + r, this.lang.help["formatH" + r]); this.insertParagraph = this.wrapCommand(function () { e.typing.insertParagraph(e.editable) }), this.insertOrderedList = this.wrapCommand(function () { e.bullet.insertOrderedList(e.editable) }), this.insertUnorderedList = this.wrapCommand(function () { e.bullet.insertUnorderedList(e.editable) }), this.indent = this.wrapCommand(function () { e.bullet.indent(e.editable) }), this.outdent = this.wrapCommand(function () { e.bullet.outdent(e.editable) }), this.insertNode = this.wrapCommand(function (t) { e.isLimited(i()(t).text().length) || (e.getLastRange().insertNode(t), e.setLastRange(tf.createFromNodeAfter(t).select())) }), this.insertText = this.wrapCommand(function (t) { e.isLimited(t.length) || (t = e.getLastRange().insertNode(ts.createText(t)), e.setLastRange(tf.create(t, ts.nodeLength(t)).select())) }), this.pasteHTML = this.wrapCommand(function (t) { e.isLimited(t.length) || (t = e.context.invoke("codeview.purify", t), t = e.getLastRange().pasteHTML(t), e.setLastRange(tf.createFromNodeAfter(b.last(t)).select())) }), this.formatBlock = this.wrapCommand(function (t, o) { var n = e.options.callbacks.onApplyCustomStyle; n ? n.call(e, o, e.context, e.onFormatBlock) : e.onFormatBlock(t, o) }), this.insertHorizontalRule = this.wrapCommand(function () { var t = e.getLastRange().insertNode(ts.create("HR")); t.nextSibling && e.setLastRange(tf.create(t.nextSibling, 0).normalize().select()) }), this.lineHeight = this.wrapCommand(function (t) { e.style.stylePara(e.getLastRange(), { lineHeight: t }) }), this.createLink = this.wrapCommand(function (t) { var o = t.url, n = t.text, a = t.isNewWindow, r = t.checkProtocol, t = t.range || e.getLastRange(), s = n.length - t.toString().length; 0 < s && e.isLimited(s) || (s = t.toString() !== n, "string" == typeof o && (o = o.trim()), e.options.onCreateLink ? o = e.options.onCreateLink(o) : r && (o = /^([A-Za-z][A-Za-z0-9+-.]*\:|#|\/)/.test(o) ? o : e.options.defaultProtocol + o), r = [], s ? (s = (t = t.deleteContents()).insertNode(i()("<A>" + n + "</A>")[0]), r.push(s)) : r = e.style.styleNodes(t, { nodeName: "A", expandClosestSibling: !0, onlyPartialContains: !0 }), i.a.each(r, function (t, e) { i()(e).attr("href", o), a ? i()(e).attr("target", "_blank") : i()(e).removeAttr("target") }), e.setLastRange(e.createRangeFromList(r).select())) }), this.color = this.wrapCommand(function (t) { var e = t.foreColor, t = t.backColor; e && document.execCommand("foreColor", !1, e), t && document.execCommand("backColor", !1, t) }), this.foreColor = this.wrapCommand(function (t) { document.execCommand("foreColor", !1, t) }), this.insertTable = this.wrapCommand(function (t) { t = t.split("x"), e.getLastRange().deleteContents().insertNode(e.table.createTable(t[0], t[1], e.options)) }), this.removeMedia = this.wrapCommand(function () { var t = i()(e.restoreTarget()).parent(); t.closest("figure").length ? t.closest("figure").remove() : t = i()(e.restoreTarget()).detach(), e.context.triggerEvent("media.delete", t, e.$editable) }), this.floatMe = this.wrapCommand(function (t) { var o = i()(e.restoreTarget()); o.toggleClass("note-float-left", "left" === t), o.toggleClass("note-float-right", "right" === t), o.css("float", "none" === t ? "" : t) }), this.resize = this.wrapCommand(function (t) { var o = i()(e.restoreTarget()); 0 === (t = parseFloat(t)) ? o.css("width", "") : o.css({ width: 100 * t + "%", height: "" }) }) } function tE(t) { if (!(this instanceof tE)) throw TypeError("Cannot call a class as a function"); this.context = t, this.$editable = t.layoutInfo.editable } function tP(t) { if (!(this instanceof tP)) throw TypeError("Cannot call a class as a function"); this.context = t, this.$eventListener = i()(document), this.$editor = t.layoutInfo.editor, this.$editable = t.layoutInfo.editable, this.options = t.options, this.lang = this.options.langInfo, this.documentEventHandlers = {}, this.$dropzone = i()('<div class="note-dropzone"><div class="note-dropzone-message"></div></div>').prependTo(this.$editor) } function tR(t, e) { (null == e || e > t.length) && (e = t.length); for (var o = 0, n = Array(e); o < e; o++)n[o] = t[o]; return n } function t_(t) { if (!(this instanceof t_)) throw TypeError("Cannot call a class as a function"); this.context = t, this.$editor = t.layoutInfo.editor, this.$editable = t.layoutInfo.editable, this.$codable = t.layoutInfo.codable, this.options = t.options, this.CodeMirrorConstructor = window.CodeMirror, this.options.codemirror.CodeMirrorConstructor && (this.CodeMirrorConstructor = this.options.codemirror.CodeMirrorConstructor) } function tL(t) { if (!(this instanceof tL)) throw TypeError("Cannot call a class as a function"); this.$document = i()(document), this.$statusbar = t.layoutInfo.statusbar, this.$editable = t.layoutInfo.editable, this.options = t.options } function tA(t) { var e = this; if (!(this instanceof tA)) throw TypeError("Cannot call a class as a function"); this.context = t, this.$editor = t.layoutInfo.editor, this.$toolbar = t.layoutInfo.toolbar, this.$editable = t.layoutInfo.editable, this.$codable = t.layoutInfo.codable, this.$window = i()(window), this.$scrollbar = i()("html, body"), this.onResize = function () { e.resizeTo({ h: e.$window.height() - e.$toolbar.outerHeight() }) } } function tF(t) { var e = this; if (!(this instanceof tF)) throw TypeError("Cannot call a class as a function"); this.context = t, this.$document = i()(document), this.$editingArea = t.layoutInfo.editingArea, this.options = t.options, this.lang = this.options.langInfo, this.events = { "summernote.mousedown": function (t, o) { e.update(o.target, o) && o.preventDefault() }, "summernote.keyup summernote.scroll summernote.change summernote.dialog.shown": function () { e.update() }, "summernote.disable summernote.blur": function () { e.hide() }, "summernote.codeview.toggled": function () { e.update() } } } (function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } })(tE.prototype, [{ key: "initialize", value: function () { this.$editable.on("paste", this.pasteByEvent.bind(this)) } }, { key: "pasteByEvent", value: function (t) { var e, o = this, n = t.originalEvent.clipboardData; n && n.items && n.items.length ? "file" === (e = 1 < n.items.length ? n.items[1] : b.head(n.items)).kind && -1 !== e.type.indexOf("image/") ? (this.context.invoke("editor.insertImagesOrCallback", [e.getAsFile()]), t.preventDefault()) : "string" === e.kind && this.context.invoke("editor.isLimited", n.getData("Text").length) && t.preventDefault() : window.clipboardData && (e = window.clipboardData.getData("text"), this.context.invoke("editor.isLimited", e.length)) && t.preventDefault(), setTimeout(function () { o.context.invoke("editor.afterCommand") }, 10) } },]), n = tE, function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tP.prototype, [{ key: "initialize", value: function () { this.options.disableDragAndDrop ? (this.documentEventHandlers.onDrop = function (t) { t.preventDefault() }, this.$eventListener = this.$dropzone, this.$eventListener.on("drop", this.documentEventHandlers.onDrop)) : this.attachDragAndDropEvent() } }, { key: "attachDragAndDropEvent", value: function () { var t = this, e = i()(), o = this.$dropzone.find(".note-dropzone-message"); this.documentEventHandlers.onDragenter = function (n) { var i = t.context.invoke("codeview.isActivated"), a = 0 < t.$editor.width() && 0 < t.$editor.height(); i || e.length || !a || (t.$editor.addClass("dragover"), t.$dropzone.width(t.$editor.width()), t.$dropzone.height(t.$editor.height()), o.text(t.lang.image.dragImageHere)), e = e.add(n.target) }, this.documentEventHandlers.onDragleave = function (o) { (e = e.not(o.target)).length && "BODY" !== o.target.nodeName || (e = i()(), t.$editor.removeClass("dragover")) }, this.documentEventHandlers.onDrop = function () { e = i()(), t.$editor.removeClass("dragover") }, this.$eventListener.on("dragenter", this.documentEventHandlers.onDragenter).on("dragleave", this.documentEventHandlers.onDragleave).on("drop", this.documentEventHandlers.onDrop), this.$dropzone.on("dragenter", function () { t.$dropzone.addClass("hover"), o.text(t.lang.image.dropImage) }).on("dragleave", function () { t.$dropzone.removeClass("hover"), o.text(t.lang.image.dragImageHere) }), this.$dropzone.on("drop", function (e) { var o = e.originalEvent.dataTransfer; e.preventDefault(), o && o.files && o.files.length ? (t.$editable.focus(), t.context.invoke("editor.insertImagesOrCallback", o.files)) : i.a.each(o.types, function (e, n) { var a; -1 < n.toLowerCase().indexOf("_moz_") || (a = o.getData(n), -1 < n.toLowerCase().indexOf("text") ? t.context.invoke("editor.pasteHTML", a) : i()(a).each(function (e, o) { t.context.invoke("editor.insertNode", o) })) }) }).on("dragover", !1) } }, { key: "destroy", value: function () { var t = this; Object.keys(this.documentEventHandlers).forEach(function (e) { t.$eventListener.off(e.substr(2).toLowerCase(), t.documentEventHandlers[e]) }), this.documentEventHandlers = {} } },]), c = tP, function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(t_.prototype, [{ key: "sync", value: function (t) { var e = this.isActivated(), o = this.CodeMirrorConstructor; e && (t ? o ? this.$codable.data("cmEditor").getDoc().setValue(t) : this.$codable.val(t) : o && this.$codable.data("cmEditor").save()) } }, { key: "initialize", value: function () { var t = this; this.$codable.on("keyup", function (e) { e.keyCode === tm.code.ESCAPE && t.deactivate() }) } }, { key: "isActivated", value: function () { return this.$editor.hasClass("codeview") } }, { key: "toggle", value: function () { this.isActivated() ? this.deactivate() : this.activate(), this.context.triggerEvent("codeview.toggled") } }, { key: "purify", value: function (t) { var e; return this.options.codeviewFilter && (t = t.replace(this.options.codeviewFilterRegex, ""), this.options.codeviewIframeFilter) && (e = this.options.codeviewIframeWhitelistSrc.concat(this.options.codeviewIframeWhitelistSrcBase), t = t.replace(/(<iframe.*?>.*?(?:<\/iframe>)?)/gi, function (t) { if (!/<.+src(?==?('|"|\s)?)[\s\S]+src(?=('|"|\s)?)[^>]*?>/i.test(t)) { var o, n = function (t) { if ("undefined" == typeof Symbol || null == t[Symbol.iterator]) { var e, o; if (Array.isArray(t) || (t = function (t) { var e; if (t) return "string" == typeof t ? tR(t, void 0) : "Map" === (e = "Object" === (e = Object.prototype.toString.call(t).slice(8, -1)) && t.constructor ? t.constructor.name : e) || "Set" === e ? Array.from(e) : "Arguments" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? tR(t, void 0) : void 0 }(t))) return e = 0, { s: o = function () { }, n: function () { return e >= t.length ? { done: !0 } : { done: !1, value: t[e++] } }, e: function (t) { throw t }, f: o }; throw TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } var n, i, a = !0, r = !1; return { s: function () { n = t[Symbol.iterator]() }, n: function () { var t = n.next(); return a = t.done, t }, e: function (t) { r = !0, i = t }, f: function () { try { a || null == n.return || n.return() } finally { if (r) throw i } } } }(e); try { for (n.s(); !(o = n.n()).done;) { var i = o.value; if (RegExp('src="(https?:)?//' + i.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&") + '/(.+)"').test(t)) return t } } catch (a) { n.e(a) } finally { n.f() } } return "" })), t } }, { key: "activate", value: function () { var t, e, o = this, n = this.CodeMirrorConstructor; this.$codable.val(ts.html(this.$editable, this.options.prettifyHtml)), this.$codable.height(this.$editable.height()), this.context.invoke("toolbar.updateCodeview", !0), this.context.invoke("airPopover.updateCodeview", !0), this.$editor.addClass("codeview"), this.$codable.focus(), n ? (t = n.fromTextArea(this.$codable[0], this.options.codemirror), this.options.codemirror.tern && (e = new n.TernServer(this.options.codemirror.tern), t.ternServer = e, t.on("cursorActivity", function (t) { e.updateArgHints(t) })), t.on("blur", function (e) { o.context.triggerEvent("blur.codeview", t.getValue(), e) }), t.on("change", function () { o.context.triggerEvent("change.codeview", t.getValue(), t) }), t.setSize(null, this.$editable.outerHeight()), this.$codable.data("cmEditor", t)) : (this.$codable.on("blur", function (t) { o.context.triggerEvent("blur.codeview", o.$codable.val(), t) }), this.$codable.on("input", function () { o.context.triggerEvent("change.codeview", o.$codable.val(), o.$codable) })) } }, { key: "deactivate", value: function () { this.CodeMirrorConstructor && (t = this.$codable.data("cmEditor"), this.$codable.val(t.getValue()), t.toTextArea()); var t = this.purify(ts.value(this.$codable, this.options.prettifyHtml) || ts.emptyPara), e = this.$editable.html() !== t; this.$editable.html(t), this.$editable.height(this.options.height ? this.$codable.height() : "auto"), this.$editor.removeClass("codeview"), e && this.context.triggerEvent("change", this.$editable.html(), this.$editable), this.$editable.focus(), this.context.invoke("toolbar.updateCodeview", !1), this.context.invoke("airPopover.updateCodeview", !1) } }, { key: "destroy", value: function () { this.isActivated() && this.deactivate() } },]), u = t_, function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tL.prototype, [{ key: "initialize", value: function () { var t = this; this.options.airMode || this.options.disableResizeEditor ? this.destroy() : this.$statusbar.on("mousedown", function (e) { function o(e) { e = e.clientY - (24 + n), e = 0 < t.options.minheight ? Math.max(e, t.options.minheight) : e, e = 0 < t.options.maxHeight ? Math.min(e, t.options.maxHeight) : e, t.$editable.height(e) } e.preventDefault(), e.stopPropagation(); var n = t.$editable.offset().top - t.$document.scrollTop(); t.$document.on("mousemove", o).one("mouseup", function () { t.$document.off("mousemove", o) }) }) } }, { key: "destroy", value: function () { this.$statusbar.off(), this.$statusbar.addClass("locked") } },]), o = tL, function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tA.prototype, [{ key: "resizeTo", value: function (t) { this.$editable.css("height", t.h), this.$codable.css("height", t.h), this.$codable.data("cmeditor") && this.$codable.data("cmeditor").setsize(null, t.h) } }, { key: "toggle", value: function () { this.$editor.toggleClass("fullscreen"), this.isFullscreen() ? (this.$editable.data("orgHeight", this.$editable.css("height")), this.$editable.data("orgMaxHeight", this.$editable.css("maxHeight")), this.$editable.css("maxHeight", ""), this.$window.on("resize", this.onResize).trigger("resize"), this.$scrollbar.css("overflow", "hidden")) : (this.$window.off("resize", this.onResize), this.resizeTo({ h: this.$editable.data("orgHeight") }), this.$editable.css("maxHeight", this.$editable.css("orgMaxHeight")), this.$scrollbar.css("overflow", "visible")), this.context.invoke("toolbar.updateFullscreen", this.isFullscreen()) } }, { key: "isFullscreen", value: function () { return this.$editor.hasClass("fullscreen") } },]), s = tA, function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tF.prototype, [{ key: "initialize", value: function () { var t = this; this.$handle = i()(['<div class="note-handle">', '<div class="note-control-selection">', '<div class="note-control-selection-bg"></div>', '<div class="note-control-holder note-control-nw"></div>', '<div class="note-control-holder note-control-ne"></div>', '<div class="note-control-holder note-control-sw"></div>', '<div class="', this.options.disableResizeImage ? "note-control-holder" : "note-control-sizing", ' note-control-se"></div>', this.options.disableResizeImage ? "" : '<div class="note-control-selection-info"></div>', "</div>", "</div>",].join("")).prependTo(this.$editingArea), this.$handle.on("mousedown", function (e) { var o, n, i, a; ts.isControlSizing(e.target) && (e.preventDefault(), e.stopPropagation(), n = (o = t.$handle.find(".note-control-selection").data("target")).offset(), i = t.$document.scrollTop(), t.$document.on("mousemove", a = function (e) { t.context.invoke("editor.resizeTo", { x: e.clientX - n.left, y: e.clientY - (n.top - i) }, o, !e.shiftKey), t.update(o[0], e) }).one("mouseup", function (e) { e.preventDefault(), t.$document.off("mousemove", a), t.context.invoke("editor.afterCommand") }), o.data("ratio") || o.data("ratio", o.height() / o.width())) }), this.$handle.on("wheel", function (e) { e.preventDefault(), t.update() }) } }, { key: "destroy", value: function () { this.$handle.remove() } }, { key: "update", value: function (t, e) { var o, n, a, r; return !this.context.isDisabled() && (o = ts.isImg(t), n = this.$handle.find(".note-control-selection"), this.context.invoke("imagePopover.update", t, e), o ? (r = { left: (r = (e = i()(t)).position()).left + parseInt(e.css("marginLeft"), 10), top: r.top + parseInt(e.css("marginTop"), 10) }, a = { w: e.outerWidth(!1), h: e.outerHeight(!1) }, n.css({ display: "block", left: r.left, top: r.top, width: a.w, height: a.h }).data("target", e), (r = new Image).src = e.attr("src"), e = a.w + "x" + a.h + " (" + this.lang.image.original + ": " + r.width + "x" + r.height + ")", n.find(".note-control-selection-info").text(e), this.context.invoke("editor.saveTarget", t)) : this.hide(), o) } }, { key: "hide", value: function () { this.context.invoke("editor.clearTarget"), this.$handle.children().hide() } },]), l = tF; var tD = /^([A-Za-z][A-Za-z0-9+-.]*\:[\/]{2}|tel:|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i, tH = (function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tz.prototype, [{ key: "initialize", value: function () { this.lastWordRange = null } }, { key: "destroy", value: function () { this.lastWordRange = null } }, { key: "replace", value: function () { var t, e; this.lastWordRange && (t = (e = this.lastWordRange.toString()).match(tD)) && (t[1] || t[2]) && (t = t[1] ? e : "http://" + e, e = this.options.showDomainOnlyForAutolink ? e.replace(/^(?:https?:\/\/)?(?:tel?:?)?(?:mailto?:?)?(?:www\.)?/i, "").split("/")[0] : e, e = i()("<a />").html(e).attr("href", t)[0], this.context.options.linkTargetBlank && i()(e).attr("target", "_blank"), this.lastWordRange.insertNode(e), this.lastWordRange = null, this.context.invoke("editor.focus")) } }, { key: "handleKeydown", value: function (t) { b.contains([tm.code.ENTER, tm.code.SPACE], t.keyCode) && (t = this.context.invoke("editor.createRange").getWordRange(), this.lastWordRange = t) } }, { key: "handleKeyup", value: function (t) { b.contains([tm.code.ENTER, tm.code.SPACE], t.keyCode) && this.replace() } },]), tz); function tz(t) { var e = this; if (!(this instanceof tz)) throw TypeError("Cannot call a class as a function"); this.context = t, this.options = t.options, this.events = { "summernote.keyup": function (t, o) { o.isDefaultPrevented() || e.handleKeyup(o) }, "summernote.keydown": function (t, o) { e.handleKeydown(o) } } } function tB(t) { var e = this; if (!(this instanceof tB)) throw TypeError("Cannot call a class as a function"); this.$note = t.layoutInfo.note, this.events = { "summernote.change": function () { e.$note.val(t.invoke("code")) } } } function tM(t) { var e = this; if (!(this instanceof tM)) throw TypeError("Cannot call a class as a function"); this.context = t, this.options = t.options.replace || {}, this.keys = [tm.code.ENTER, tm.code.SPACE, tm.code.PERIOD, tm.code.COMMA, tm.code.SEMICOLON, tm.code.SLASH], this.previousKeydownCode = null, this.events = { "summernote.keyup": function (t, o) { o.isDefaultPrevented() || e.handleKeyup(o) }, "summernote.keydown": function (t, o) { e.handleKeydown(o) } } } function tO(t) { var e = this; if (!(this instanceof tO)) throw TypeError("Cannot call a class as a function"); this.context = t, this.$editingArea = t.layoutInfo.editingArea, this.options = t.options, !0 === this.options.inheritPlaceholder && (this.options.placeholder = this.context.$note.attr("placeholder") || this.options.placeholder), this.events = { "summernote.init summernote.change": function () { e.update() }, "summernote.codeview.toggled": function () { e.update() } } } function tU(t) { if (!(this instanceof tU)) throw TypeError("Cannot call a class as a function"); this.ui = i.a.summernote.ui, this.context = t, this.$toolbar = t.layoutInfo.toolbar, this.options = t.options, this.lang = this.options.langInfo, this.invertedKeyMap = f.invertObject(this.options.keyMap[d.isMac ? "mac" : "pc"]) } function t0(t) { if (!(this instanceof t0)) throw TypeError("Cannot call a class as a function"); this.context = t, this.$window = i()(window), this.$document = i()(document), this.ui = i.a.summernote.ui, this.$note = t.layoutInfo.note, this.$editor = t.layoutInfo.editor, this.$toolbar = t.layoutInfo.toolbar, this.$editable = t.layoutInfo.editable, this.$statusbar = t.layoutInfo.statusbar, this.options = t.options, this.isFollowing = !1, this.followScroll = this.followScroll.bind(this) } function tj(t) { if (!(this instanceof tj)) throw TypeError("Cannot call a class as a function"); this.context = t, this.ui = i.a.summernote.ui, this.$body = i()(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo, t.memo("help.linkDialog.show", this.options.langInfo.help["linkDialog.show"]) } function tW(t) { var e = this; if (!(this instanceof tW)) throw TypeError("Cannot call a class as a function"); this.context = t, this.ui = i.a.summernote.ui, this.options = t.options, this.events = { "summernote.keyup summernote.mouseup summernote.change summernote.scroll": function () { e.update() }, "summernote.disable summernote.dialog.shown summernote.blur": function () { e.hide() } } } function t1(t) { if (!(this instanceof t1)) throw TypeError("Cannot call a class as a function"); this.context = t, this.ui = i.a.summernote.ui, this.$body = i()(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo } function t4(t) { var e = this; if (!(this instanceof t4)) throw TypeError("Cannot call a class as a function"); this.context = t, this.ui = i.a.summernote.ui, this.editable = t.layoutInfo.editable[0], this.options = t.options, this.events = { "summernote.disable summernote.blur": function () { e.hide() } } } function tK(t) { var e = this; if (!(this instanceof tK)) throw TypeError("Cannot call a class as a function"); this.context = t, this.ui = i.a.summernote.ui, this.options = t.options, this.events = { "summernote.mousedown": function (t, o) { e.update(o.target) }, "summernote.keyup summernote.scroll summernote.change": function () { e.update() }, "summernote.disable summernote.blur": function () { e.hide() } } } function tV(t) { if (!(this instanceof tV)) throw TypeError("Cannot call a class as a function"); this.context = t, this.ui = i.a.summernote.ui, this.$body = i()(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo } function t2(t) { if (!(this instanceof t2)) throw TypeError("Cannot call a class as a function"); this.context = t, this.ui = i.a.summernote.ui, this.$body = i()(document.body), this.$editor = t.layoutInfo.editor, this.options = t.options, this.lang = this.options.langInfo } function t3(t) { var e = this; if (!(this instanceof t3)) throw TypeError("Cannot call a class as a function"); this.context = t, this.ui = i.a.summernote.ui, this.options = t.options, this.hidable = !0, this.onContextmenu = !1, this.pageX = null, this.pageY = null, this.events = { "summernote.contextmenu": function (t) { e.options.editing && (t.preventDefault(), t.stopPropagation(), e.onContextmenu = !0, e.update(!0)) }, "summernote.mousedown": function (t, o) { e.pageX = o.pageX, e.pageY = o.pageY }, "summernote.keyup summernote.mouseup summernote.scroll": function (t, o) { e.options.editing && !e.onContextmenu && (e.pageX = o.pageX, e.pageY = o.pageY, e.update()), e.onContextmenu = !1 }, "summernote.disable summernote.change summernote.dialog.shown summernote.blur": function () { e.hide() }, "summernote.focusout": function () { e.$popover.is(":active,:focus") || e.hide() } } } function tq(t) { var e = this; if (!(this instanceof tq)) throw TypeError("Cannot call a class as a function"); this.context = t, this.ui = i.a.summernote.ui, this.$editable = t.layoutInfo.editable, this.options = t.options, this.hint = this.options.hint || [], this.direction = this.options.hintDirection || "bottom", this.hints = Array.isArray(this.hint) ? this.hint : [this.hint], this.events = { "summernote.keyup": function (t, o) { o.isDefaultPrevented() || e.handleKeyup(o) }, "summernote.keydown": function (t, o) { e.handleKeydown(o) }, "summernote.disable summernote.dialog.shown summernote.blur": function () { e.hide() } } } (function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } })(tB.prototype, [{ key: "shouldInitialize", value: function () { return ts.isTextarea(this.$note[0]) } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tM.prototype, [{ key: "shouldInitialize", value: function () { return !!this.options.match } }, { key: "initialize", value: function () { this.lastWord = null } }, { key: "destroy", value: function () { this.lastWord = null } }, { key: "replace", value: function () { var t, e; this.lastWord && (e = (t = this).lastWord.toString(), this.options.match(e, function (e) { var o; e && (o = "", "string" == typeof e ? o = ts.createText(e) : e instanceof jQuery ? o = e[0] : e instanceof Node && (o = e), o) && (t.lastWord.insertNode(o), t.lastWord = null, t.context.invoke("editor.focus")) })) } }, { key: "handleKeydown", value: function (t) { var e; this.previousKeydownCode && b.contains(this.keys, this.previousKeydownCode) || b.contains(this.keys, t.keyCode) && (e = this.context.invoke("editor.createRange").getWordRange(), this.lastWord = e), this.previousKeydownCode = t.keyCode } }, { key: "handleKeyup", value: function (t) { b.contains(this.keys, t.keyCode) && this.replace() } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tO.prototype, [{ key: "shouldInitialize", value: function () { return !!this.options.placeholder } }, { key: "initialize", value: function () { var t = this; this.$placeholder = i()('<div class="note-placeholder">'), this.$placeholder.on("click", function () { t.context.invoke("focus") }).html(this.options.placeholder).prependTo(this.$editingArea), this.update() } }, { key: "destroy", value: function () { this.$placeholder.remove() } }, { key: "update", value: function () { var t = !this.context.invoke("codeview.isActivated") && this.context.invoke("editor.isEmpty"); this.$placeholder.toggle(t) } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tU.prototype, [{ key: "representShortcut", value: function (t) { return t = this.invertedKeyMap[t], this.options.shortcuts && t ? " (" + (t = d.isMac ? t.replace("CMD", "⌘").replace("SHIFT", "⇧") : t).replace("BACKSLASH", "\\").replace("SLASH", "/").replace("LEFTBRACKET", "[").replace("RIGHTBRACKET", "]") + ")" : "" } }, { key: "button", value: function (t) { return !this.options.tooltip && t.tooltip && delete t.tooltip, t.container = this.options.container, this.ui.button(t) } }, { key: "initialize", value: function () { this.addToolbarButtons(), this.addImagePopoverButtons(), this.addLinkPopoverButtons(), this.addTablePopoverButtons(), this.fontInstalledMap = {} } }, { key: "destroy", value: function () { delete this.fontInstalledMap } }, { key: "isFontInstalled", value: function (t) { return Object.prototype.hasOwnProperty.call(this.fontInstalledMap, t) || (this.fontInstalledMap[t] = d.isFontInstalled(t) || b.contains(this.options.fontNamesIgnoreCheck, t)), this.fontInstalledMap[t] } }, { key: "isFontDeservedToAdd", value: function (t) { return "" !== (t = t.toLowerCase()) && this.isFontInstalled(t) && -1 === d.genericFontFamilies.indexOf(t) } }, { key: "colorPalette", value: function (t, e, o, n) { var a = this; return this.ui.buttonGroup({ className: "note-color " + t, children: [this.button({ className: "note-current-color-button", contents: this.ui.icon(this.options.icons.font + " note-recent-color"), tooltip: e, click: function (t) { t = i()(t.currentTarget), o && n ? a.context.invoke("editor.color", { backColor: t.attr("data-backColor"), foreColor: t.attr("data-foreColor") }) : o ? a.context.invoke("editor.color", { backColor: t.attr("data-backColor") }) : n && a.context.invoke("editor.color", { foreColor: t.attr("data-foreColor") }) }, callback: function (t) { var e = t.find(".note-recent-color"); o && (e.css("background-color", a.options.colorButton.backColor), t.attr("data-backColor", a.options.colorButton.backColor)), n ? (e.css("color", a.options.colorButton.foreColor), t.attr("data-foreColor", a.options.colorButton.foreColor)) : e.css("color", "transparent") } }), this.button({ className: "dropdown-toggle", contents: this.ui.dropdownButtonContents("", this.options), tooltip: this.lang.color.more, data: { toggle: "dropdown" } }), this.ui.dropdown({ items: (o ? ['<div class="note-palette">', '<div class="note-palette-title">' + this.lang.color.background + "</div>", "<div>", '<button type="button" class="note-color-reset btn btn-light btn-default" data-event="backColor" data-value="transparent">', this.lang.color.transparent, "</button>", "</div>", '<div class="note-holder" data-event="backColor"><!-- back colors --></div>', "<div>", '<button type="button" class="note-color-select btn btn-light btn-default" data-event="openPalette" data-value="backColorPicker">', this.lang.color.cpSelect, "</button>", '<input type="color" id="backColorPicker" class="note-btn note-color-select-btn" value="' + this.options.colorButton.backColor + '" data-event="backColorPalette">', "</div>", '<div class="note-holder-custom" id="backColorPalette" data-event="backColor"></div>', "</div>",].join("") : "") + (n ? ['<div class="note-palette">', '<div class="note-palette-title">' + this.lang.color.foreground + "</div>", "<div>", '<button type="button" class="note-color-reset btn btn-light btn-default" data-event="removeFormat" data-value="foreColor">', this.lang.color.resetToDefault, "</button>", "</div>", '<div class="note-holder" data-event="foreColor"><!-- fore colors --></div>', "<div>", '<button type="button" class="note-color-select btn btn-light btn-default" data-event="openPalette" data-value="foreColorPicker">', this.lang.color.cpSelect, "</button>", '<input type="color" id="foreColorPicker" class="note-btn note-color-select-btn" value="' + this.options.colorButton.foreColor + '" data-event="foreColorPalette">', "</div>", '<div class="note-holder-custom" id="foreColorPalette" data-event="foreColor"></div>', "</div>",].join("") : ""), callback: function (t) { t.find(".note-holder").each(function (t, e) { (e = i()(e)).append(a.ui.palette({ colors: a.options.colors, colorsName: a.options.colorsName, eventName: e.data("event"), container: a.options.container, tooltip: a.options.tooltip }).render()) }); var e = [["#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]]; t.find(".note-holder-custom").each(function (t, o) { (o = i()(o)).append(a.ui.palette({ colors: e, colorsName: e, eventName: o.data("event"), container: a.options.container, tooltip: a.options.tooltip }).render()) }), t.find("input[type=color]").each(function (e, o) { i()(o).change(function () { var e = t.find("#" + i()(this).data("event")).find(".note-color-btn").first(), o = this.value.toUpperCase(); e.css("background-color", o).attr("aria-label", o).attr("data-value", o).attr("data-original-title", o), e.click() }) }) }, click: function (e) { e.stopPropagation(); var o, n, r, s = i()("." + t).find(".note-dropdown-menu"), e = i()(e.target), l = e.data("event"), c = e.attr("data-value"); "openPalette" === l ? (o = s.find("#" + c), r = (s = i()(s.find("#" + o.data("event")).find(".note-color-row")[0])).find(".note-color-btn").last().detach(), n = o.val(), r.css("background-color", n).attr("aria-label", n).attr("data-value", n).attr("data-original-title", n), s.prepend(r), o.click()) : (b.contains(["backColor", "foreColor"], l) && (n = "backColor" === l ? "background-color" : "color", s = e.closest(".note-color").find(".note-recent-color"), r = e.closest(".note-color").find(".note-current-color-button"), s.css(n, c), r.attr("data-" + l, c)), a.context.invoke("editor." + l, c)) } }),] }).render() } }, { key: "addToolbarButtons", value: function () { var t = this; this.context.memo("button.style", function () { return t.ui.buttonGroup([t.button({ className: "dropdown-toggle", contents: t.ui.dropdownButtonContents(t.ui.icon(t.options.icons.magic), t.options), tooltip: t.lang.style.style, data: { toggle: "dropdown" } }), t.ui.dropdown({ className: "dropdown-style", items: t.options.styleTags, title: t.lang.style.style, template: function (e) { var o = (e = "string" == typeof e ? { tag: e, title: Object.prototype.hasOwnProperty.call(t.lang.style, e) ? t.lang.style[e] : e } : e).tag, n = e.title; return "<" + o + (e.style ? ' style="' + e.style + '" ' : "") + (e.className ? ' class="' + e.className + '"' : "") + ">" + n + "</" + o + ">" }, click: t.context.createInvokeHandler("editor.formatBlock") }),]).render() }); for (var e = 0, o = this.options.styleTags.length; e < o; e++)!function (e) { var o = t.options.styleTags[e]; t.context.memo("button.style." + o, function () { return t.button({ className: "note-btn-style-" + o, contents: '<div data-value="' + o + '">' + o.toUpperCase() + "</div>", tooltip: t.lang.style[o], click: t.context.createInvokeHandler("editor.formatBlock") }).render() }) }(e); this.context.memo("button.bold", function () { return t.button({ className: "note-btn-bold", contents: t.ui.icon(t.options.icons.bold), tooltip: t.lang.font.bold + t.representShortcut("bold"), click: t.context.createInvokeHandlerAndUpdateState("editor.bold") }).render() }), this.context.memo("button.italic", function () { return t.button({ className: "note-btn-italic", contents: t.ui.icon(t.options.icons.italic), tooltip: t.lang.font.italic + t.representShortcut("italic"), click: t.context.createInvokeHandlerAndUpdateState("editor.italic") }).render() }), this.context.memo("button.underline", function () { return t.button({ className: "note-btn-underline", contents: t.ui.icon(t.options.icons.underline), tooltip: t.lang.font.underline + t.representShortcut("underline"), click: t.context.createInvokeHandlerAndUpdateState("editor.underline") }).render() }), this.context.memo("button.clear", function () { return t.button({ contents: t.ui.icon(t.options.icons.eraser), tooltip: t.lang.font.clear + t.representShortcut("removeFormat"), click: t.context.createInvokeHandler("editor.removeFormat") }).render() }), this.context.memo("button.strikethrough", function () { return t.button({ className: "note-btn-strikethrough", contents: t.ui.icon(t.options.icons.strikethrough), tooltip: t.lang.font.strikethrough + t.representShortcut("strikethrough"), click: t.context.createInvokeHandlerAndUpdateState("editor.strikethrough") }).render() }), this.context.memo("button.superscript", function () { return t.button({ className: "note-btn-superscript", contents: t.ui.icon(t.options.icons.superscript), tooltip: t.lang.font.superscript, click: t.context.createInvokeHandlerAndUpdateState("editor.superscript") }).render() }), this.context.memo("button.subscript", function () { return t.button({ className: "note-btn-subscript", contents: t.ui.icon(t.options.icons.subscript), tooltip: t.lang.font.subscript, click: t.context.createInvokeHandlerAndUpdateState("editor.subscript") }).render() }), this.context.memo("button.fontname", function () { var e = t.context.invoke("editor.currentStyle"); return t.options.addDefaultFonts && i.a.each(e["font-family"].split(","), function (e, o) { o = o.trim().replace(/['"]+/g, ""), t.isFontDeservedToAdd(o) && -1 === t.options.fontNames.indexOf(o) && t.options.fontNames.push(o) }), t.ui.buttonGroup([t.button({ className: "dropdown-toggle", contents: t.ui.dropdownButtonContents('<span class="note-current-fontname"></span>', t.options), tooltip: t.lang.font.name, data: { toggle: "dropdown" } }), t.ui.dropdownCheck({ className: "dropdown-fontname", checkClassName: t.options.icons.menuCheck, items: t.options.fontNames.filter(t.isFontInstalled.bind(t)), title: t.lang.font.name, template: function (t) { return '<span style="font-family: ' + d.validFontName(t) + '">' + t + "</span>" }, click: t.context.createInvokeHandlerAndUpdateState("editor.fontName") }),]).render() }), this.context.memo("button.fontsize", function () { return t.ui.buttonGroup([t.button({ className: "dropdown-toggle", contents: t.ui.dropdownButtonContents('<span class="note-current-fontsize"></span>', t.options), tooltip: t.lang.font.size, data: { toggle: "dropdown" } }), t.ui.dropdownCheck({ className: "dropdown-fontsize", checkClassName: t.options.icons.menuCheck, items: t.options.fontSizes, title: t.lang.font.size, click: t.context.createInvokeHandlerAndUpdateState("editor.fontSize") }),]).render() }), this.context.memo("button.fontsizeunit", function () { return t.ui.buttonGroup([t.button({ className: "dropdown-toggle", contents: t.ui.dropdownButtonContents('<span class="note-current-fontsizeunit"></span>', t.options), tooltip: t.lang.font.sizeunit, data: { toggle: "dropdown" } }), t.ui.dropdownCheck({ className: "dropdown-fontsizeunit", checkClassName: t.options.icons.menuCheck, items: t.options.fontSizeUnits, title: t.lang.font.sizeunit, click: t.context.createInvokeHandlerAndUpdateState("editor.fontSizeUnit") }),]).render() }), this.context.memo("button.color", function () { return t.colorPalette("note-color-all", t.lang.color.recent, !0, !0) }), this.context.memo("button.forecolor", function () { return t.colorPalette("note-color-fore", t.lang.color.foreground, !1, !0) }), this.context.memo("button.backcolor", function () { return t.colorPalette("note-color-back", t.lang.color.background, !0, !1) }), this.context.memo("button.ul", function () { return t.button({ contents: t.ui.icon(t.options.icons.unorderedlist), tooltip: t.lang.lists.unordered + t.representShortcut("insertUnorderedList"), click: t.context.createInvokeHandler("editor.insertUnorderedList") }).render() }), this.context.memo("button.ol", function () { return t.button({ contents: t.ui.icon(t.options.icons.orderedlist), tooltip: t.lang.lists.ordered + t.representShortcut("insertOrderedList"), click: t.context.createInvokeHandler("editor.insertOrderedList") }).render() }); var n = this.button({ contents: this.ui.icon(this.options.icons.alignLeft), tooltip: this.lang.paragraph.left + this.representShortcut("justifyLeft"), click: this.context.createInvokeHandler("editor.justifyLeft") }), a = this.button({ contents: this.ui.icon(this.options.icons.alignCenter), tooltip: this.lang.paragraph.center + this.representShortcut("justifyCenter"), click: this.context.createInvokeHandler("editor.justifyCenter") }), r = this.button({ contents: this.ui.icon(this.options.icons.alignRight), tooltip: this.lang.paragraph.right + this.representShortcut("justifyRight"), click: this.context.createInvokeHandler("editor.justifyRight") }), s = this.button({ contents: this.ui.icon(this.options.icons.alignJustify), tooltip: this.lang.paragraph.justify + this.representShortcut("justifyFull"), click: this.context.createInvokeHandler("editor.justifyFull") }), l = this.button({ contents: this.ui.icon(this.options.icons.outdent), tooltip: this.lang.paragraph.outdent + this.representShortcut("outdent"), click: this.context.createInvokeHandler("editor.outdent") }), c = this.button({ contents: this.ui.icon(this.options.icons.indent), tooltip: this.lang.paragraph.indent + this.representShortcut("indent"), click: this.context.createInvokeHandler("editor.indent") }); this.context.memo("button.justifyLeft", f.invoke(n, "render")), this.context.memo("button.justifyCenter", f.invoke(a, "render")), this.context.memo("button.justifyRight", f.invoke(r, "render")), this.context.memo("button.justifyFull", f.invoke(s, "render")), this.context.memo("button.outdent", f.invoke(l, "render")), this.context.memo("button.indent", f.invoke(c, "render")), this.context.memo("button.paragraph", function () { return t.ui.buttonGroup([t.button({ className: "dropdown-toggle", contents: t.ui.dropdownButtonContents(t.ui.icon(t.options.icons.alignLeft), t.options), tooltip: t.lang.paragraph.paragraph, data: { toggle: "dropdown" } }), t.ui.dropdown([t.ui.buttonGroup({ className: "note-align", children: [n, a, r, s] }), t.ui.buttonGroup({ className: "note-list", children: [l, c] })]),]).render() }), this.context.memo("button.height", function () { return t.ui.buttonGroup([t.button({ className: "dropdown-toggle", contents: t.ui.dropdownButtonContents(t.ui.icon(t.options.icons.textHeight), t.options), tooltip: t.lang.font.height, data: { toggle: "dropdown" } }), t.ui.dropdownCheck({ items: t.options.lineHeights, checkClassName: t.options.icons.menuCheck, className: "dropdown-line-height", title: t.lang.font.height, click: t.context.createInvokeHandler("editor.lineHeight") }),]).render() }), this.context.memo("button.table", function () { return t.ui.buttonGroup([t.button({ className: "dropdown-toggle", contents: t.ui.dropdownButtonContents(t.ui.icon(t.options.icons.table), t.options), tooltip: t.lang.table.table, data: { toggle: "dropdown" } }), t.ui.dropdown({ title: t.lang.table.table, className: "note-table", items: '<div class="note-dimension-picker"><div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"></div><div class="note-dimension-picker-highlighted"></div><div class="note-dimension-picker-unhighlighted"></div></div><div class="note-dimension-display">1 x 1</div>' }),], { callback: function (e) { e.find(".note-dimension-picker-mousecatcher").css({ width: t.options.insertTableMaxSize.col + "em", height: t.options.insertTableMaxSize.row + "em" }).mousedown(t.context.createInvokeHandler("editor.insertTable")).on("mousemove", t.tableMoveHandler.bind(t)) } }).render() }), this.context.memo("button.link", function () { return t.button({ contents: t.ui.icon(t.options.icons.link), tooltip: t.lang.link.link + t.representShortcut("linkDialog.show"), click: t.context.createInvokeHandler("linkDialog.show") }).render() }), this.context.memo("button.picture", function () { return t.button({ contents: t.ui.icon(t.options.icons.picture), tooltip: t.lang.image.image, click: t.context.createInvokeHandler("imageDialog.show") }).render() }), this.context.memo("button.video", function () { return t.button({ contents: t.ui.icon(t.options.icons.video), tooltip: t.lang.video.video, click: t.context.createInvokeHandler("videoDialog.show") }).render() }), this.context.memo("button.hr", function () { return t.button({ contents: t.ui.icon(t.options.icons.minus), tooltip: t.lang.hr.insert + t.representShortcut("insertHorizontalRule"), click: t.context.createInvokeHandler("editor.insertHorizontalRule") }).render() }), this.context.memo("button.fullscreen", function () { return t.button({ className: "btn-fullscreen note-codeview-keep", contents: t.ui.icon(t.options.icons.arrowsAlt), tooltip: t.lang.options.fullscreen, click: t.context.createInvokeHandler("fullscreen.toggle") }).render() }), this.context.memo("button.redo", function () { return t.button({ contents: t.ui.icon(t.options.icons.redo), tooltip: t.lang.history.redo + t.representShortcut("redo"), click: t.context.createInvokeHandler("editor.redo") }).render() }), this.context.memo("button.undo", function () { return t.button({ contents: t.ui.icon(t.options.icons.undo), tooltip: t.lang.history.undo + t.representShortcut("undo"), click: t.context.createInvokeHandler("editor.undo") }).render() }) } }, { key: "addImagePopoverButtons", value: function () { var t = this; this.context.memo("button.resizeFull", function () { return t.button({ contents: '<span class="note-fontsize-10">100%</span>', tooltip: t.lang.image.resizeFull, click: t.context.createInvokeHandler("editor.resize", "1") }).render() }), this.context.memo("button.resizeHalf", function () { return t.button({ contents: '<span class="note-fontsize-10">50%</span>', tooltip: t.lang.image.resizeHalf, click: t.context.createInvokeHandler("editor.resize", "0.5") }).render() }), this.context.memo("button.resizeQuarter", function () { return t.button({ contents: '<span class="note-fontsize-10">25%</span>', tooltip: t.lang.image.resizeQuarter, click: t.context.createInvokeHandler("editor.resize", "0.25") }).render() }), this.context.memo("button.resizeNone", function () { return t.button({ contents: t.ui.icon(t.options.icons.rollback), tooltip: t.lang.image.resizeNone, click: t.context.createInvokeHandler("editor.resize", "0") }).render() }), this.context.memo("button.floatLeft", function () { return t.button({ contents: t.ui.icon(t.options.icons.floatLeft), tooltip: t.lang.image.floatLeft, click: t.context.createInvokeHandler("editor.floatMe", "left") }).render() }), this.context.memo("button.floatRight", function () { return t.button({ contents: t.ui.icon(t.options.icons.floatRight), tooltip: t.lang.image.floatRight, click: t.context.createInvokeHandler("editor.floatMe", "right") }).render() }), this.context.memo("button.floatNone", function () { return t.button({ contents: t.ui.icon(t.options.icons.rollback), tooltip: t.lang.image.floatNone, click: t.context.createInvokeHandler("editor.floatMe", "none") }).render() }), this.context.memo("button.removeMedia", function () { return t.button({ contents: t.ui.icon(t.options.icons.trash), tooltip: t.lang.image.remove, click: t.context.createInvokeHandler("editor.removeMedia") }).render() }) } }, { key: "addLinkPopoverButtons", value: function () { var t = this; this.context.memo("button.linkDialogShow", function () { return t.button({ contents: t.ui.icon(t.options.icons.link), tooltip: t.lang.link.edit, click: t.context.createInvokeHandler("linkDialog.show") }).render() }), this.context.memo("button.unlink", function () { return t.button({ contents: t.ui.icon(t.options.icons.unlink), tooltip: t.lang.link.unlink, click: t.context.createInvokeHandler("editor.unlink") }).render() }) } }, { key: "addTablePopoverButtons", value: function () { var t = this; this.context.memo("button.addRowUp", function () { return t.button({ className: "btn-md", contents: t.ui.icon(t.options.icons.rowAbove), tooltip: t.lang.table.addRowAbove, click: t.context.createInvokeHandler("editor.addRow", "top") }).render() }), this.context.memo("button.addRowDown", function () { return t.button({ className: "btn-md", contents: t.ui.icon(t.options.icons.rowBelow), tooltip: t.lang.table.addRowBelow, click: t.context.createInvokeHandler("editor.addRow", "bottom") }).render() }), this.context.memo("button.addColLeft", function () { return t.button({ className: "btn-md", contents: t.ui.icon(t.options.icons.colBefore), tooltip: t.lang.table.addColLeft, click: t.context.createInvokeHandler("editor.addCol", "left") }).render() }), this.context.memo("button.addColRight", function () { return t.button({ className: "btn-md", contents: t.ui.icon(t.options.icons.colAfter), tooltip: t.lang.table.addColRight, click: t.context.createInvokeHandler("editor.addCol", "right") }).render() }), this.context.memo("button.deleteRow", function () { return t.button({ className: "btn-md", contents: t.ui.icon(t.options.icons.rowRemove), tooltip: t.lang.table.delRow, click: t.context.createInvokeHandler("editor.deleteRow") }).render() }), this.context.memo("button.deleteCol", function () { return t.button({ className: "btn-md", contents: t.ui.icon(t.options.icons.colRemove), tooltip: t.lang.table.delCol, click: t.context.createInvokeHandler("editor.deleteCol") }).render() }), this.context.memo("button.deleteTable", function () { return t.button({ className: "btn-md", contents: t.ui.icon(t.options.icons.trash), tooltip: t.lang.table.delTable, click: t.context.createInvokeHandler("editor.deleteTable") }).render() }) } }, { key: "build", value: function (t, e) { for (var o = 0, n = e.length; o < n; o++) { for (var i = e[o], a = Array.isArray(i) ? i[0] : i, r = Array.isArray(i) ? 1 === i.length ? [i[0]] : i[1] : [i], s = this.ui.buttonGroup({ className: "note-" + a }).render(), l = 0, c = r.length; l < c; l++) { var u = this.context.memo("button." + r[l]); u && s.append("function" == typeof u ? u(this.context) : u) } s.appendTo(t) } } }, { key: "updateCurrentStyle", value: function (t) { var e, o, n, a, r, s = this, t = t || this.$toolbar, l = this.context.invoke("editor.currentStyle"); this.updateBtnStates(t, { ".note-btn-bold": function () { return "bold" === l["font-bold"] }, ".note-btn-italic": function () { return "italic" === l["font-italic"] }, ".note-btn-underline": function () { return "underline" === l["font-underline"] }, ".note-btn-subscript": function () { return "subscript" === l["font-subscript"] }, ".note-btn-superscript": function () { return "superscript" === l["font-superscript"] }, ".note-btn-strikethrough": function () { return "strikethrough" === l["font-strikethrough"] } }), l["font-family"] && (e = l["font-family"].split(",").map(function (t) { return t.replace(/[\'\"]/g, "").replace(/\s+$/, "").replace(/^\s+/, "") }), o = b.find(e, this.isFontInstalled.bind(this)), t.find(".dropdown-fontname a").each(function (t, e) { var e = i()(e), n = e.data("value") + "" == o + ""; e.toggleClass("checked", n) }), t.find(".note-current-fontname").text(o).css("font-family", o)), l["font-size"] && (n = l["font-size"], t.find(".dropdown-fontsize a").each(function (t, e) { var e = i()(e), o = e.data("value") + "" == n + ""; e.toggleClass("checked", o) }), t.find(".note-current-fontsize").text(n), a = l["font-size-unit"], t.find(".dropdown-fontsizeunit a").each(function (t, e) { var e = i()(e), o = e.data("value") + "" == a + ""; e.toggleClass("checked", o) }), t.find(".note-current-fontsizeunit").text(a)), l["line-height"] && (r = l["line-height"], t.find(".dropdown-line-height li a").each(function (t, e) { e = i()(e).data("value") + "" == r + "", s.className = e ? "checked" : "" })) } }, { key: "updateBtnStates", value: function (t, e) { var o = this; i.a.each(e, function (e, n) { o.ui.toggleBtnActive(t.find(e), n()) }) } }, { key: "tableMoveHandler", value: function (t) { var e = i()(t.target.parentNode), o = e.next(), n = e.find(".note-dimension-picker-mousecatcher"), a = e.find(".note-dimension-picker-highlighted"), e = e.find(".note-dimension-picker-unhighlighted"), t = Math.ceil((r = void 0 === t.offsetX ? (r = i()(t.target).offset(), { x: t.pageX - r.left, y: t.pageY - r.top }) : { x: t.offsetX, y: t.offsetY }).x / 18) || 1, r = Math.ceil(r.y / 18) || 1; a.css({ width: t + "em", height: r + "em" }), n.data("value", t + "x" + r), 3 < t && t < this.options.insertTableMaxSize.col && e.css({ width: t + 1 + "em" }), 3 < r && r < this.options.insertTableMaxSize.row && e.css({ height: r + 1 + "em" }), o.html(t + " x " + r) } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(t0.prototype, [{ key: "shouldInitialize", value: function () { return !this.options.airMode } }, { key: "initialize", value: function () { var t = this; this.options.toolbar = this.options.toolbar || [], this.options.toolbar.length ? this.context.invoke("buttons.build", this.$toolbar, this.options.toolbar) : this.$toolbar.hide(), this.options.toolbarContainer && this.$toolbar.appendTo(this.options.toolbarContainer), this.changeContainer(!1), this.$note.on("summernote.keyup summernote.mouseup summernote.change", function () { t.context.invoke("buttons.updateCurrentStyle") }), this.context.invoke("buttons.updateCurrentStyle"), this.options.followingToolbar && this.$window.on("scroll resize", this.followScroll) } }, { key: "destroy", value: function () { this.$toolbar.children().remove(), this.options.followingToolbar && this.$window.off("scroll resize", this.followScroll) } }, { key: "followScroll", value: function () { if (this.$editor.hasClass("fullscreen")) return !1; var t = this.$editor.outerHeight(), e = this.$editor.width(), o = this.$toolbar.height(), n = this.$statusbar.height(), a = 0, r = (this.options.otherStaticBar && (a = i()(this.options.otherStaticBar).outerHeight()), this.$document.scrollTop()), s = this.$editor.offset().top, l = s - a, s = s + t - a - o - n; !this.isFollowing && l < r && r < s - o ? (this.isFollowing = !0, this.$editable.css({ marginTop: this.$toolbar.outerHeight() }), this.$toolbar.css({ position: "fixed", top: a, width: e, zIndex: 1e3 })) : this.isFollowing && (r < l || s < r) && (this.isFollowing = !1, this.$toolbar.css({ position: "relative", top: 0, width: "100%", zIndex: "auto" }), this.$editable.css({ marginTop: "" })) } }, { key: "changeContainer", value: function (t) { t ? this.$toolbar.prependTo(this.$editor) : this.options.toolbarContainer && this.$toolbar.appendTo(this.options.toolbarContainer), this.options.followingToolbar && this.followScroll() } }, { key: "updateFullscreen", value: function (t) { this.ui.toggleBtnActive(this.$toolbar.find(".btn-fullscreen"), t), this.changeContainer(t) } }, { key: "updateCodeview", value: function (t) { this.ui.toggleBtnActive(this.$toolbar.find(".btn-codeview"), t), t ? this.deactivate() : this.activate() } }, { key: "activate", value: function (t) { var e = this.$toolbar.find("button"); t || (e = e.not(".note-codeview-keep")), this.ui.toggleBtn(e, !0) } }, { key: "deactivate", value: function (t) { var e = this.$toolbar.find("button"); t || (e = e.not(".note-codeview-keep")), this.ui.toggleBtn(e, !1) } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tj.prototype, [{ key: "initialize", value: function () { var t = this.options.dialogsInBody ? this.$body : this.options.container, e = ['<div class="form-group note-form-group">', '<label for="note-dialog-link-txt-'.concat(this.options.id, '" class="note-form-label">').concat(this.lang.link.textToDisplay, "</label>"), '<input id="note-dialog-link-txt-'.concat(this.options.id, '" class="note-link-text form-control note-form-control note-input" type="text"/>'), "</div>", '<div class="form-group note-form-group">', '<label for="note-dialog-link-url-'.concat(this.options.id, '" class="note-form-label">').concat(this.lang.link.url, "</label>"), '<input id="note-dialog-link-url-'.concat(this.options.id, '" class="note-link-url form-control note-form-control note-input" type="text" value="http://"/>'), "</div>", this.options.disableLinkTarget ? "" : i()("<div/>").append(this.ui.checkbox({ className: "sn-checkbox-open-in-new-window", text: this.lang.link.openInNewWindow, checked: !0 }).render()).html(), i()("<div/>").append(this.ui.checkbox({ className: "sn-checkbox-use-protocol", text: this.lang.link.useProtocol, checked: !0 }).render()).html(),].join(""), o = '<input type="button" href="#" class="'.concat("btn btn-primary note-btn note-btn-primary note-link-btn", '" value="').concat(this.lang.link.insert, '" disabled>'); this.$dialog = this.ui.dialog({ className: "link-dialog", title: this.lang.link.insert, fade: this.options.dialogsFade, body: e, footer: o }).render().appendTo(t) } }, { key: "destroy", value: function () { this.ui.hideDialog(this.$dialog), this.$dialog.remove() } }, { key: "bindEnterKey", value: function (t, e) { t.on("keypress", function (t) { t.keyCode === tm.code.ENTER && (t.preventDefault(), e.trigger("click")) }) } }, { key: "toggleLinkBtn", value: function (t, e, o) { this.ui.toggleBtn(t, e.val() && o.val()) } }, { key: "showLinkDialog", value: function (t) { var e = this; return i.a.Deferred(function (o) { var n = e.$dialog.find(".note-link-text"), i = e.$dialog.find(".note-link-url"), a = e.$dialog.find(".note-link-btn"), r = e.$dialog.find(".sn-checkbox-open-in-new-window input[type=checkbox]"), s = e.$dialog.find(".sn-checkbox-use-protocol input[type=checkbox]"); e.ui.onDialogShown(e.$dialog, function () { e.context.triggerEvent("dialog.shown"), !t.url && f.isValidUrl(t.text) && (t.url = t.text), n.on("input paste propertychange", function () { t.text = n.val(), e.toggleLinkBtn(a, n, i) }).val(t.text), i.on("input paste propertychange", function () { t.text || n.val(i.val()), e.toggleLinkBtn(a, n, i) }).val(t.url), d.isSupportTouch || i.trigger("focus"), e.toggleLinkBtn(a, n, i), e.bindEnterKey(i, a), e.bindEnterKey(n, a); var l = void 0 !== t.isNewWindow ? t.isNewWindow : e.context.options.linkTargetBlank, l = (r.prop("checked", l), !t.url && e.context.options.useProtocol); s.prop("checked", l), a.one("click", function (a) { a.preventDefault(), o.resolve({ range: t.range, url: i.val(), text: n.val(), isNewWindow: r.is(":checked"), checkProtocol: s.is(":checked") }), e.ui.hideDialog(e.$dialog) }) }), e.ui.onDialogHidden(e.$dialog, function () { n.off(), i.off(), a.off(), "pending" === o.state() && o.reject() }), e.ui.showDialog(e.$dialog) }).promise() } }, { key: "show", value: function () { var t = this, e = this.context.invoke("editor.getLinkInfo"); this.context.invoke("editor.saveRange"), this.showLinkDialog(e).then(function (e) { t.context.invoke("editor.restoreRange"), t.context.invoke("editor.createLink", e) }).fail(function () { t.context.invoke("editor.restoreRange") }) } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tW.prototype, [{ key: "shouldInitialize", value: function () { return !b.isEmpty(this.options.popover.link) } }, { key: "initialize", value: function () { this.$popover = this.ui.popover({ className: "note-link-popover", callback: function (t) { t.find(".popover-content,.note-popover-content").prepend('<span><a target="_blank"></a>&nbsp;</span>') } }).render().appendTo(this.options.container); var t = this.$popover.find(".popover-content,.note-popover-content"); this.context.invoke("buttons.build", t, this.options.popover.link), this.$popover.on("mousedown", function (t) { t.preventDefault() }) } }, { key: "destroy", value: function () { this.$popover.remove() } }, { key: "update", value: function () { var t, e; this.context.invoke("editor.hasFocus") && (e = this.context.invoke("editor.getLastRange")).isCollapsed() && e.isOnAnchor() ? (e = ts.ancestor(e.sc, ts.isAnchor), t = i()(e).attr("href"), this.$popover.find("a").attr("href", t).text(t), t = ts.posFromPlaceholder(e), e = i()(this.options.container).offset(), t.top -= e.top, t.left -= e.left, this.$popover.css({ display: "block", left: t.left, top: t.top })) : this.hide() } }, { key: "hide", value: function () { this.$popover.hide() } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(t1.prototype, [{ key: "initialize", value: function () { var t = "", e = (this.options.maximumImageFileSize && (e = Math.floor(Math.log(this.options.maximumImageFileSize) / Math.log(1024)), e = +(this.options.maximumImageFileSize / Math.pow(1024, e)).toFixed(2) + " " + " KMGTP"[e] + "B", t = "<small>".concat(this.lang.image.maximumFileSize + " : " + e, "</small>")), this.options.dialogsInBody ? this.$body : this.options.container), t = ['<div class="form-group note-form-group note-group-select-from-files">', '<label for="note-dialog-image-file-' + this.options.id + '" class="note-form-label">' + this.lang.image.selectFromFiles + "</label>", '<input id="note-dialog-image-file-' + this.options.id + '" class="note-image-input form-control-file note-form-control note-input" ', ' type="file" name="files" accept="image/*" multiple="multiple"/>', t, "</div>", '<div class="form-group note-group-image-url">', '<label for="note-dialog-image-url-' + this.options.id + '" class="note-form-label">' + this.lang.image.url + "</label>", '<input id="note-dialog-image-url-' + this.options.id + '" class="note-image-url form-control note-form-control note-input" type="text"/>', "</div>",].join(""), o = '<input type="button" href="#" class="'.concat("btn btn-primary note-btn note-btn-primary note-image-btn", '" value="').concat(this.lang.image.insert, '" disabled>'); this.$dialog = this.ui.dialog({ title: this.lang.image.insert, fade: this.options.dialogsFade, body: t, footer: o }).render().appendTo(e) } }, { key: "destroy", value: function () { this.ui.hideDialog(this.$dialog), this.$dialog.remove() } }, { key: "bindEnterKey", value: function (t, e) { t.on("keypress", function (t) { t.keyCode === tm.code.ENTER && (t.preventDefault(), e.trigger("click")) }) } }, { key: "show", value: function () { var t = this; this.context.invoke("editor.saveRange"), this.showImageDialog().then(function (e) { t.ui.hideDialog(t.$dialog), t.context.invoke("editor.restoreRange"), "string" == typeof e ? t.options.callbacks.onImageLinkInsert ? t.context.triggerEvent("image.link.insert", e) : t.context.invoke("editor.insertImage", e) : t.context.invoke("editor.insertImagesOrCallback", e) }).fail(function () { t.context.invoke("editor.restoreRange") }) } }, { key: "showImageDialog", value: function () { var t = this; return i.a.Deferred(function (e) { var o = t.$dialog.find(".note-image-input"), n = t.$dialog.find(".note-image-url"), i = t.$dialog.find(".note-image-btn"); t.ui.onDialogShown(t.$dialog, function () { t.context.triggerEvent("dialog.shown"), o.replaceWith(o.clone().on("change", function (t) { e.resolve(t.target.files || t.target.value) }).val("")), n.on("input paste propertychange", function () { t.ui.toggleBtn(i, n.val()) }).val(""), d.isSupportTouch || n.trigger("focus"), i.click(function (t) { t.preventDefault(), e.resolve(n.val()) }), t.bindEnterKey(n, i) }), t.ui.onDialogHidden(t.$dialog, function () { o.off(), n.off(), i.off(), "pending" === e.state() && e.reject() }), t.ui.showDialog(t.$dialog) }) } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(t4.prototype, [{ key: "shouldInitialize", value: function () { return !b.isEmpty(this.options.popover.image) } }, { key: "initialize", value: function () { this.$popover = this.ui.popover({ className: "note-image-popover" }).render().appendTo(this.options.container); var t = this.$popover.find(".popover-content,.note-popover-content"); this.context.invoke("buttons.build", t, this.options.popover.image), this.$popover.on("mousedown", function (t) { t.preventDefault() }) } }, { key: "destroy", value: function () { this.$popover.remove() } }, { key: "update", value: function (t, e) { var o, n; ts.isImg(t) ? (t = i()(t).offset(), o = i()(this.options.container).offset(), n = {}, this.options.popatmouse ? (n.left = e.pageX - 20, n.top = e.pageY) : n = t, n.top -= o.top, n.left -= o.left, this.$popover.css({ display: "block", left: n.left, top: n.top })) : this.hide() } }, { key: "hide", value: function () { this.$popover.hide() } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tK.prototype, [{ key: "shouldInitialize", value: function () { return !b.isEmpty(this.options.popover.table) } }, { key: "initialize", value: function () { this.$popover = this.ui.popover({ className: "note-table-popover" }).render().appendTo(this.options.container); var t = this.$popover.find(".popover-content,.note-popover-content"); this.context.invoke("buttons.build", t, this.options.popover.table), d.isFF && document.execCommand("enableInlineTableEditing", !1, !1), this.$popover.on("mousedown", function (t) { t.preventDefault() }) } }, { key: "destroy", value: function () { this.$popover.remove() } }, { key: "update", value: function (t) { var e, o; return !this.context.isDisabled() && ((e = ts.isCell(t)) ? (t = ts.posFromPlaceholder(t), o = i()(this.options.container).offset(), t.top -= o.top, t.left -= o.left, this.$popover.css({ display: "block", left: t.left, top: t.top })) : this.hide(), e) } }, { key: "hide", value: function () { this.$popover.hide() } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tV.prototype, [{ key: "initialize", value: function () { var t = this.options.dialogsInBody ? this.$body : this.options.container, e = ['<div class="form-group note-form-group row-fluid">', '<label for="note-dialog-video-url-'.concat(this.options.id, '" class="note-form-label">').concat(this.lang.video.url, ' <small class="text-muted">').concat(this.lang.video.providers, "</small></label>"), '<input id="note-dialog-video-url-'.concat(this.options.id, '" class="note-video-url form-control note-form-control note-input" type="text"/>'), "</div>",].join(""), o = '<input type="button" href="#" class="'.concat("btn btn-primary note-btn note-btn-primary note-video-btn", '" value="').concat(this.lang.video.insert, '" disabled>'); this.$dialog = this.ui.dialog({ title: this.lang.video.insert, fade: this.options.dialogsFade, body: e, footer: o }).render().appendTo(t) } }, { key: "destroy", value: function () { this.ui.hideDialog(this.$dialog), this.$dialog.remove() } }, { key: "bindEnterKey", value: function (t, e) { t.on("keypress", function (t) { t.keyCode === tm.code.ENTER && (t.preventDefault(), e.trigger("click")) }) } }, { key: "createVideoNode", value: function (t) { var e = t.match(/\/\/(?:(?:www|m)\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([\w|-]{11})(?:(?:[\?&]t=)(\S+))?$/), o = t.match(/(?:www\.|\/\/)instagram\.com\/p\/(.[a-zA-Z0-9_-]*)/), n = t.match(/\/\/vine\.co\/v\/([a-zA-Z0-9]+)/), a = t.match(/\/\/(player\.)?vimeo\.com\/([a-z]*\/)*(\d+)[?]?.*/), r = t.match(/.+dailymotion.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/), s = t.match(/\/\/v\.youku\.com\/v_show\/id_(\w+)=*\.html/), l = t.match(/\/\/v\.qq\.com.*?vid=(.+)/), c = t.match(/\/\/v\.qq\.com\/x?\/?(page|cover).*?\/([^\/]+)\.html\??.*/), u = t.match(/^.+.(mp4|m4v)$/), d = t.match(/^.+.(ogg|ogv)$/), h = t.match(/^.+.(webm)$/), f = t.match(/(?:www\.|\/\/)facebook\.com\/([^\/]+)\/videos\/([0-9]+)/); if (e && 11 === e[1].length) { var p = e[1], m = 0; if (void 0 !== e[2]) { var g = e[2].match(/^(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?$/); if (g) for (var v = [3600, 60, 1], b = 0, y = v.length; b < y; b++)m += void 0 !== g[b + 1] ? v[b] * parseInt(g[b + 1], 10) : 0 } p = i()("<iframe>").attr("frameborder", 0).attr("src", "//www.youtube.com/embed/" + p + (0 < m ? "?start=" + m : "")).attr("width", "640").attr("height", "360") } else if (o && o[0].length) p = i()("<iframe>").attr("frameborder", 0).attr("src", "https://instagram.com/p/" + o[1] + "/embed/").attr("width", "612").attr("height", "710").attr("scrolling", "no").attr("allowtransparency", "true"); else if (n && n[0].length) p = i()("<iframe>").attr("frameborder", 0).attr("src", n[0] + "/embed/simple").attr("width", "600").attr("height", "600").attr("class", "vine-embed"); else if (a && a[3].length) p = i()("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("src", "//player.vimeo.com/video/" + a[3]).attr("width", "640").attr("height", "360"); else if (r && r[2].length) p = i()("<iframe>").attr("frameborder", 0).attr("src", "//www.dailymotion.com/embed/video/" + r[2]).attr("width", "640").attr("height", "360"); else if (s && s[1].length) p = i()("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("height", "498").attr("width", "510").attr("src", "//player.youku.com/embed/" + s[1]); else if (l && l[1].length || c && c[2].length) e = l && l[1].length ? l[1] : c[2], p = i()("<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>").attr("frameborder", 0).attr("height", "310").attr("width", "500").attr("src", "https://v.qq.com/txp/iframe/player.html?vid=" + e + "&amp;auto=0"); else if (u || d || h) p = i()("<video controls>").attr("src", t).attr("width", "640").attr("height", "360"); else { if (!f || !f[0].length) return !1; p = i()("<iframe>").attr("frameborder", 0).attr("src", "https://www.facebook.com/plugins/video.php?href=" + encodeURIComponent(f[0]) + "&show_text=0&width=560").attr("width", "560").attr("height", "301").attr("scrolling", "no").attr("allowtransparency", "true") } return p.addClass("note-video-clip"), p[0] } }, { key: "show", value: function () { var t = this, e = this.context.invoke("editor.getSelectedText"); this.context.invoke("editor.saveRange"), this.showVideoDialog(e).then(function (e) { t.ui.hideDialog(t.$dialog), t.context.invoke("editor.restoreRange"), (e = t.createVideoNode(e)) && t.context.invoke("editor.insertNode", e) }).fail(function () { t.context.invoke("editor.restoreRange") }) } }, { key: "showVideoDialog", value: function () { var t = this; return i.a.Deferred(function (e) { var o = t.$dialog.find(".note-video-url"), n = t.$dialog.find(".note-video-btn"); t.ui.onDialogShown(t.$dialog, function () { t.context.triggerEvent("dialog.shown"), o.on("input paste propertychange", function () { t.ui.toggleBtn(n, o.val()) }), d.isSupportTouch || o.trigger("focus"), n.click(function (t) { t.preventDefault(), e.resolve(o.val()) }), t.bindEnterKey(o, n) }), t.ui.onDialogHidden(t.$dialog, function () { o.off(), n.off(), "pending" === e.state() && e.reject() }), t.ui.showDialog(t.$dialog) }) } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(t2.prototype, [{ key: "initialize", value: function () { var t = this.options.dialogsInBody ? this.$body : this.options.container; this.$dialog = this.ui.dialog({ title: this.lang.options.help, fade: this.options.dialogsFade, body: this.createShortcutList(), footer: '<p class="text-center"><a href="http://summernote.org/" target="_blank">Summernote 0.8.18</a> \xb7 <a href="https://github.com/summernote/summernote" target="_blank">Project</a> \xb7 <a href="https://github.com/summernote/summernote/issues" target="_blank">Issues</a></p>', callback: function (t) { t.find(".modal-body,.note-modal-body").css({ "max-height": 300, overflow: "scroll" }) } }).render().appendTo(t) } }, { key: "destroy", value: function () { this.ui.hideDialog(this.$dialog), this.$dialog.remove() } }, { key: "createShortcutList", value: function () { var t = this, e = this.options.keyMap[d.isMac ? "mac" : "pc"]; return Object.keys(e).map(function (o) { var n = e[o], a = i()('<div><div class="help-list-item"></div></div>'); return a.append(i()("<label><kbd>" + o + "</kdb></label>").css({ width: 180, "margin-right": 10 })).append(i()("<span/>").html(t.context.memo("help." + n) || n)), a.html() }).join("") } }, { key: "showHelpDialog", value: function () { var t = this; return i.a.Deferred(function (e) { t.ui.onDialogShown(t.$dialog, function () { t.context.triggerEvent("dialog.shown"), e.resolve() }), t.ui.showDialog(t.$dialog) }).promise() } }, { key: "show", value: function () { var t = this; this.context.invoke("editor.saveRange"), this.showHelpDialog().then(function () { t.context.invoke("editor.restoreRange") }) } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(t3.prototype, [{ key: "shouldInitialize", value: function () { return this.options.airMode && !b.isEmpty(this.options.popover.air) } }, { key: "initialize", value: function () { var t = this, e = (this.$popover = this.ui.popover({ className: "note-air-popover" }).render().appendTo(this.options.container), this.$popover.find(".popover-content")); this.context.invoke("buttons.build", e, this.options.popover.air), this.$popover.on("mousedown", function () { t.hidable = !1 }), this.$popover.on("mouseup", function () { t.hidable = !0 }) } }, { key: "destroy", value: function () { this.$popover.remove() } }, { key: "update", value: function (t) { var e = this.context.invoke("editor.currentStyle"); !e.range || e.range.isCollapsed() && !t ? this.hide() : (e = { left: this.pageX, top: this.pageY }, t = i()(this.options.container).offset(), e.top -= t.top, e.left -= t.left, this.$popover.css({ display: "block", left: Math.max(e.left, 0) + -5, top: e.top + 5 }), this.context.invoke("buttons.updateCurrentStyle", this.$popover)) } }, { key: "updateCodeview", value: function (t) { this.ui.toggleBtnActive(this.$popover.find(".btn-codeview"), t), t && this.hide() } }, { key: "hide", value: function () { this.hidable && this.$popover.hide() } },]), function t(e, o) { for (var n = 0; n < o.length; n++) { var i = o[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }(tq.prototype, [{ key: "shouldInitialize", value: function () { return 0 < this.hints.length } }, { key: "initialize", value: function () { var t = this; this.lastWordRange = null, this.matchingWord = null, this.$popover = this.ui.popover({ className: "note-hint-popover", hideArrow: !0, direction: "" }).render().appendTo(this.options.container), this.$popover.hide(), this.$content = this.$popover.find(".popover-content,.note-popover-content"), this.$content.on("click", ".note-hint-item", function (e) { t.$content.find(".active").removeClass("active"), i()(e.currentTarget).addClass("active"), t.replace() }), this.$popover.on("mousedown", function (t) { t.preventDefault() }) } }, { key: "destroy", value: function () { this.$popover.remove() } }, { key: "selectItem", value: function (t) { this.$content.find(".active").removeClass("active"), t.addClass("active"), this.$content[0].scrollTop = t[0].offsetTop - this.$content.innerHeight() / 2 } }, { key: "moveDown", value: function () { var t = this.$content.find(".note-hint-item.active"), e = t.next(); e.length ? this.selectItem(e) : ((e = t.parent().next()).length || (e = this.$content.find(".note-hint-group").first()), this.selectItem(e.find(".note-hint-item").first())) } }, { key: "moveUp", value: function () { var t = this.$content.find(".note-hint-item.active"), e = t.prev(); e.length ? this.selectItem(e) : ((e = t.parent().prev()).length || (e = this.$content.find(".note-hint-group").last()), this.selectItem(e.find(".note-hint-item").last())) } }, { key: "replace", value: function () { var t, e = this.$content.find(".note-hint-item.active"); e.length && (e = this.nodeFromItem(e), null !== this.matchingWord && 0 === this.matchingWord.length ? this.lastWordRange.so = this.lastWordRange.eo : null !== this.matchingWord && 0 < this.matchingWord.length && !this.lastWordRange.isCollapsed() && 0 < (t = this.lastWordRange.eo - this.lastWordRange.so - this.matchingWord.length) && (this.lastWordRange.so += t), this.lastWordRange.insertNode(e), ("next" === this.options.hintSelect ? (t = document.createTextNode(""), i()(e).after(t), tf.createFromNodeBefore(t)) : tf.createFromNodeAfter(e)).select(), this.lastWordRange = null, this.hide(), this.context.invoke("editor.focus")) } }, { key: "nodeFromItem", value: function (t) { var e = this.hints[t.data("index")], t = t.data("item"), e = e.content ? e.content(t) : t; return "string" == typeof e ? ts.createText(e) : e } }, { key: "createItemTemplates", value: function (t, e) { var o = this.hints[t]; return e.map(function (e) { var n = i()('<div class="note-hint-item"/>'); return n.append(o.template ? o.template(e) : e + ""), n.data({ index: t, item: e }), n }) } }, { key: "handleKeydown", value: function (t) { this.$popover.is(":visible") && (t.keyCode === tm.code.ENTER ? (t.preventDefault(), this.replace()) : t.keyCode === tm.code.UP ? (t.preventDefault(), this.moveUp()) : t.keyCode === tm.code.DOWN && (t.preventDefault(), this.moveDown())) } }, { key: "searchKeyword", value: function (t, e, o) { (t = this.hints[t]) && t.match.test(e) && t.search ? (e = t.match.exec(e), this.matchingWord = e[0], t.search(e[1], o)) : o() } }, { key: "createGroup", value: function (t, e) { var o = this, n = i()('<div class="note-hint-group note-hint-group-' + t + '"></div>'); return this.searchKeyword(t, e, function (e) { (e = e || []).length && (n.html(o.createItemTemplates(t, e)), o.show()) }), n } }, { key: "handleKeyup", value: function (t) { var e = this; if (!b.contains([tm.code.ENTER, tm.code.UP, tm.code.DOWN], t.keyCode)) { var o, n, a, r = this.context.invoke("editor.getLastRange"); if ("words" === this.options.hintMode) { if (n = (o = r.getWordsRange(r)).toString(), this.hints.forEach(function (t) { if (t.match.test(n)) return o = r.getWordsMatchRange(t.match), !1 }), !o) return void this.hide() } else o = r.getWordRange(); n = o.toString(), this.hints.length && n ? (this.$content.empty(), t = f.rect2bnd(b.last(o.getClientRects())), a = i()(this.options.container).offset(), t && (t.top -= a.top, t.left -= a.left, this.$popover.hide(), this.lastWordRange = o, this.hints.forEach(function (t, o) { t.match.test(n) && e.createGroup(o, n).appendTo(e.$content) }), this.$content.find(".note-hint-item:first").addClass("active"), "top" === this.direction ? this.$popover.css({ left: t.left, top: t.top - this.$popover.outerHeight() - 5 }) : this.$popover.css({ left: t.left, top: t.top + t.height + 5 }))) : this.hide() } } }, { key: "show", value: function () { this.$popover.show() } }, { key: "hide", value: function () { this.$popover.hide() } },]), i.a.summernote = i.a.extend(i.a.summernote, { version: "0.8.18", plugins: {}, dom: ts, range: tf, lists: b, options: { langInfo: i.a.summernote.lang["en-US"], editing: !0, modules: { editor: tT, clipboard: n, dropzone: c, codeview: u, statusbar: o, fullscreen: s, handle: l, hintPopover: tq, autoLink: tH, autoSync: tB, autoReplace: tM, placeholder: tO, buttons: tU, toolbar: t0, linkDialog: tj, linkPopover: tW, imageDialog: t1, imagePopover: t4, tablePopover: tK, videoDialog: tV, helpDialog: t2, airPopover: t3 }, buttons: {}, lang: "en-US", followingToolbar: !1, toolbarPosition: "top", otherStaticBar: "", codeviewKeepButton: !1, toolbar: [["style", ["style"]], ["fontsize", ["fontsize"]], ["font", ["bold", "underline", "clear"]], ["fontname", ["fontname"]], ["color", ["color"]], ["para", ["ul", "ol", "paragraph"]], ["table", ["table"]], ["insert", ["link", "picture", "video"]], ["view", ["fullscreen", "codeview", "help"]],], popatmouse: !0, popover: { image: [["resize", ["resizeFull", "resizeHalf", "resizeQuarter", "resizeNone"]], ["float", ["floatLeft", "floatRight", "floatNone"]], ["remove", ["removeMedia"]],], link: [["link", ["linkDialogShow", "unlink"]]], table: [["add", ["addRowDown", "addRowUp", "addColLeft", "addColRight"]], ["delete", ["deleteRow", "deleteCol", "deleteTable"]],], air: [["color", ["color"]], ["font", ["bold", "underline", "clear"]], ["para", ["ul", "paragraph"]], ["table", ["table"]], ["insert", ["link", "picture"]], ["view", ["fullscreen", "codeview"]],] }, airMode: !1, overrideContextMenu: !1, width: null, height: null, linkTargetBlank: !0, useProtocol: !0, defaultProtocol: "http://", focus: !1, tabDisabled: !1, tabSize: 4, styleWithCSS: !1, shortcuts: !0, textareaAutoSync: !0, tooltip: "auto", container: null, maxTextLength: 0, blockquoteBreakingLevel: 2, spellCheck: !0, disableGrammar: !1, placeholder: null, inheritPlaceholder: !1, recordEveryKeystroke: !1, historyLimit: 200, showDomainOnlyForAutolink: !1, hintMode: "word", hintSelect: "after", hintDirection: "bottom", styleTags: ["p", "blockquote", "pre", "h1", "h2", "h3", "h4", "h5", "h6"], fontNames: ["Arial", "Arial Black", "Comic Sans MS", "Courier New", "Helvetica Neue", "Helvetica", "Impact", "Lucida Grande", "Tahoma", "Times New Roman", "Verdana"], fontNamesIgnoreCheck: [], addDefaultFonts: !0, fontSizes: ["8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72"], fontSizeUnits: ["px", "pt"], colors: [["#000000", "#424242", "#636363", "#9C9C94", "#CEC6CE", "#EFEFEF", "#F7F7F7", "#FFFFFF"], ["#FF0000", "#FF9C00", "#FFFF00", "#00FF00", "#00FFFF", "#0000FF", "#9C00FF", "#FF00FF"], ["#F7C6CE", "#FFE7CE", "#FFEFC6", "#D6EFD6", "#CEDEE7", "#CEE7F7", "#D6D6E7", "#E7D6DE"], ["#E79C9C", "#FFC69C", "#FFE79C", "#B5D6A5", "#A5C6CE", "#9CC6EF", "#B5A5D6", "#D6A5BD"], ["#E76363", "#F7AD6B", "#FFD663", "#94BD7B", "#73A5AD", "#6BADDE", "#8C7BC6", "#C67BA5"], ["#CE0000", "#E79439", "#EFC631", "#6BA54A", "#4A7B8C", "#3984C6", "#634AA5", "#A54A7B"], ["#9C0000", "#B56308", "#BD9400", "#397B21", "#104A5A", "#085294", "#311873", "#731842"], ["#630000", "#7B3900", "#846300", "#295218", "#083139", "#003163", "#21104A", "#4A1031"],], colorsName: [["Black", "Tundora", "Dove Gray", "Star Dust", "Pale Slate", "Gallery", "Alabaster", "White"], ["Red", "Orange Peel", "Yellow", "Green", "Cyan", "Blue", "Electric Violet", "Magenta"], ["Azalea", "Karry", "Egg White", "Zanah", "Botticelli", "Tropical Blue", "Mischka", "Twilight"], ["Tonys Pink", "Peach Orange", "Cream Brulee", "Sprout", "Casper", "Perano", "Cold Purple", "Careys Pink"], ["Mandy", "Rajah", "Dandelion", "Olivine", "Gulf Stream", "Viking", "Blue Marguerite", "Puce"], ["Guardsman Red", "Fire Bush", "Golden Dream", "Chelsea Cucumber", "Smalt Blue", "Boston Blue", "Butterfly Bush", "Cadillac"], ["Sangria", "Mai Tai", "Buddha Gold", "Forest Green", "Eden", "Venice Blue", "Meteorite", "Claret"], ["Rosewood", "Cinnamon", "Olive", "Parsley", "Tiber", "Midnight Blue", "Valentino", "Loulou"],], colorButton: { foreColor: "#000000", backColor: "#FFFF00" }, lineHeights: ["1.0", "1.2", "1.4", "1.5", "1.6", "1.8", "2.0", "3.0"], tableClassName: "table table-bordered", insertTableMaxSize: { col: 10, row: 10 }, dialogsInBody: !1, dialogsFade: !1, maximumImageFileSize: null, callbacks: { onBeforeCommand: null, onBlur: null, onBlurCodeview: null, onChange: null, onChangeCodeview: null, onDialogShown: null, onEnter: null, onFocus: null, onImageLinkInsert: null, onImageUpload: null, onImageUploadError: null, onInit: null, onKeydown: null, onKeyup: null, onMousedown: null, onMouseup: null, onPaste: null, onScroll: null }, codemirror: { mode: "text/html", htmlMode: !0, lineNumbers: !0 }, codeviewFilter: !1, codeviewFilterRegex: /<\/*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|ilayer|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|t(?:itle|extarea)|xml)[^>]*?>/gi, codeviewIframeFilter: !0, codeviewIframeWhitelistSrc: [], codeviewIframeWhitelistSrcBase: ["www.youtube.com", "www.youtube-nocookie.com", "www.facebook.com", "vine.co", "instagram.com", "player.vimeo.com", "www.dailymotion.com", "player.youku.com", "v.qq.com"], keyMap: { pc: { ESC: "escape", ENTER: "insertParagraph", "CTRL+Z": "undo", "CTRL+Y": "redo", TAB: "tab", "SHIFT+TAB": "untab", "CTRL+B": "bold", "CTRL+I": "italic", "CTRL+U": "underline", "CTRL+SHIFT+S": "strikethrough", "CTRL+BACKSLASH": "removeFormat", "CTRL+SHIFT+L": "justifyLeft", "CTRL+SHIFT+E": "justifyCenter", "CTRL+SHIFT+R": "justifyRight", "CTRL+SHIFT+J": "justifyFull", "CTRL+SHIFT+NUM7": "insertUnorderedList", "CTRL+SHIFT+NUM8": "insertOrderedList", "CTRL+LEFTBRACKET": "outdent", "CTRL+RIGHTBRACKET": "indent", "CTRL+NUM0": "formatPara", "CTRL+NUM1": "formatH1", "CTRL+NUM2": "formatH2", "CTRL+NUM3": "formatH3", "CTRL+NUM4": "formatH4", "CTRL+NUM5": "formatH5", "CTRL+NUM6": "formatH6", "CTRL+ENTER": "insertHorizontalRule", "CTRL+K": "linkDialog.show" }, mac: { ESC: "escape", ENTER: "insertParagraph", "CMD+Z": "undo", "CMD+SHIFT+Z": "redo", TAB: "tab", "SHIFT+TAB": "untab", "CMD+B": "bold", "CMD+I": "italic", "CMD+U": "underline", "CMD+SHIFT+S": "strikethrough", "CMD+BACKSLASH": "removeFormat", "CMD+SHIFT+L": "justifyLeft", "CMD+SHIFT+E": "justifyCenter", "CMD+SHIFT+R": "justifyRight", "CMD+SHIFT+J": "justifyFull", "CMD+SHIFT+NUM7": "insertUnorderedList", "CMD+SHIFT+NUM8": "insertOrderedList", "CMD+LEFTBRACKET": "outdent", "CMD+RIGHTBRACKET": "indent", "CMD+NUM0": "formatPara", "CMD+NUM1": "formatH1", "CMD+NUM2": "formatH2", "CMD+NUM3": "formatH3", "CMD+NUM4": "formatH4", "CMD+NUM5": "formatH5", "CMD+NUM6": "formatH6", "CMD+ENTER": "insertHorizontalRule", "CMD+K": "linkDialog.show" } }, icons: { align: "note-icon-align", alignCenter: "note-icon-align-center", alignJustify: "note-icon-align-justify", alignLeft: "note-icon-align-left", alignRight: "note-icon-align-right", rowBelow: "note-icon-row-below", colBefore: "note-icon-col-before", colAfter: "note-icon-col-after", rowAbove: "note-icon-row-above", rowRemove: "note-icon-row-remove", colRemove: "note-icon-col-remove", indent: "note-icon-align-indent", outdent: "note-icon-align-outdent", arrowsAlt: "note-icon-arrows-alt", bold: "note-icon-bold", caret: "note-icon-caret", circle: "note-icon-circle", close: "note-icon-close", code: "note-icon-code", eraser: "note-icon-eraser", floatLeft: "note-icon-float-left", floatRight: "note-icon-float-right", font: "note-icon-font", frame: "note-icon-frame", italic: "note-icon-italic", link: "note-icon-link", unlink: "note-icon-chain-broken", magic: "note-icon-magic", menuCheck: "note-icon-menu-check", minus: "note-icon-minus", orderedlist: "note-icon-orderedlist", pencil: "note-icon-pencil", picture: "note-icon-picture", question: "note-icon-question", redo: "note-icon-redo", rollback: "note-icon-rollback", square: "note-icon-square", strikethrough: "note-icon-strikethrough", subscript: "note-icon-subscript", superscript: "note-icon-superscript", table: "note-icon-table", textHeight: "note-icon-text-height", trash: "note-icon-trash", underline: "note-icon-underline", undo: "note-icon-undo", unorderedlist: "note-icon-unorderedlist", video: "note-icon-video" } } }) }, 4: function (t, e, o) { }, 52: function (t, e, o) { "use strict"; o.r(e); var e = o(0), n = o.n(e), i = o(1); function a(t) { return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t })(t) } function r(t, e) { return t + " " + C(e.icons.caret, "span") } var s = i.a.create('<div class="note-editor note-frame panel panel-default"/>'), l = i.a.create('<div class="panel-heading note-toolbar" role="toolbar"/>'), c = i.a.create('<div class="note-editing-area"/>'), u = i.a.create('<textarea class="note-codable" aria-multiline="true"/>'), d = i.a.create('<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>'), h = i.a.create('<output class="note-status-output" role="status" aria-live="polite"></output><div class="note-statusbar" role="status"><div class="note-resizebar" aria-label="Resize"><div class="note-icon-bar"></div><div class="note-icon-bar"></div><div class="note-icon-bar"></div></div></div>'), f = i.a.create('<div class="note-editor note-airframe"/>'), p = i.a.create('<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"></div><output class="note-status-output" role="status" aria-live="polite"></output>'), m = i.a.create('<div class="note-btn-group btn-group">'), g = i.a.create('<ul class="note-dropdown-menu dropdown-menu">', function (t, e) { var o = Array.isArray(e.items) ? e.items.map(function (t) { var o = "string" == typeof t ? t : t.value || "", n = e.template ? e.template(t) : t, t = "object" === a(t) ? t.option : void 0; return '<li aria-label="' + o + '"><a href="#" data-value="' + o + '"' + (void 0 !== t ? ' data-option="' + t + '"' : "") + ">" + n + "</a></li>" }).join("") : e.items; t.html(o).attr({ "aria-label": e.title }), e && e.codeviewKeepButton && t.addClass("note-codeview-keep") }), v = i.a.create('<ul class="note-dropdown-menu dropdown-menu note-check">', function (t, e) { var o = Array.isArray(e.items) ? e.items.map(function (t) { var o = "string" == typeof t ? t : t.value || "", n = e.template ? e.template(t) : t; return '<li aria-label="' + t + '"><a href="#" data-value="' + o + '">' + C(e.checkClassName) + " " + n + "</a></li>" }).join("") : e.items; t.html(o).attr({ "aria-label": e.title }), e && e.codeviewKeepButton && t.addClass("note-codeview-keep") }), b = i.a.create('<div class="modal note-modal" aria-hidden="false" tabindex="-1" role="dialog"/>', function (t, e) { e.fade && t.addClass("fade"), t.attr({ "aria-label": e.title }), t.html(['<div class="modal-dialog">', '<div class="modal-content">', e.title ? '<div class="modal-header"><button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" aria-hidden="true">&times;</button><h4 class="modal-title">' + e.title + "</h4></div>" : "", '<div class="modal-body">' + e.body + "</div>", e.footer ? '<div class="modal-footer">' + e.footer + "</div>" : "", "</div>", "</div>",].join("")) }), y = i.a.create('<div class="note-popover popover in"><div class="arrow"></div><div class="popover-content note-children-container"></div></div>', function (t, e) { var o = void 0 !== e.direction ? e.direction : "bottom"; t.addClass(o), e.hideArrow && t.find(".arrow").hide() }), k = i.a.create('<div class="checkbox"></div>', function (t, e) { t.html(["<label" + (e.id ? ' for="note-' + e.id + '"' : "") + ">", '<input type="checkbox"' + (e.id ? ' id="note-' + e.id + '"' : ""), e.checked ? " checked" : "", ' aria-checked="' + (e.checked ? "true" : "false") + '"/>', e.text || "", "</label>",].join("")) }), C = function (t, e) { return "<" + (e = e || "i") + ' class="' + t + '"></' + e + ">" }; o(3), o(4), n.a.summernote = n.a.extend(n.a.summernote, { ui_template: function (t) { return { editor: s, toolbar: l, editingArea: c, codable: u, editable: d, statusbar: h, airEditor: f, airEditable: p, buttonGroup: m, dropdown: g, dropdownButtonContents: r, dropdownCheck: v, dialog: b, popover: y, checkbox: k, icon: C, options: t, palette: function (e, o) { return i.a.create('<div class="note-color-palette"/>', function (e, o) { for (var n = [], i = 0, a = o.colors.length; i < a; i++) { for (var r = o.eventName, s = o.colors[i], l = o.colorsName[i], c = [], u = 0, d = s.length; u < d; u++) { var h = s[u], f = l[u]; c.push(['<button type="button" class="note-color-btn"', 'style="background-color:', h, '" ', 'data-event="', r, '" ', 'data-value="', h, '" ', 'title="', f, '" ', 'aria-label="', f, '" ', 'data-toggle="button" tabindex="-1"></button>',].join("")) } n.push('<div class="note-color-row">' + c.join("") + "</div>") } e.html(n.join("")), o.tooltip && e.find(".note-color-btn").tooltip({ container: o.container || t.container, trigger: "hover", placement: "bottom" }) })(e, o) }, button: function (e, o) { return i.a.create('<button type="button" class="note-btn btn btn-default btn-sm" tabindex="-1">', function (e, o) { o && o.tooltip && e.attr({ title: o.tooltip, "aria-label": o.tooltip }).tooltip({ container: o.container || t.container, trigger: "hover", placement: "bottom" }).on("click", function (t) { n()(t.currentTarget).tooltip("hide") }), o && o.codeviewButton && e.addClass("note-codeview-keep") })(e, o) }, toggleBtn: function (t, e) { t.toggleClass("disabled", !e), t.attr("disabled", !e) }, toggleBtnActive: function (t, e) { t.toggleClass("active", e) }, onDialogShown: function (t, e) { t.one("shown.bs.modal", e) }, onDialogHidden: function (t, e) { t.one("hidden.bs.modal", e) }, showDialog: function (t) { t.modal("show") }, hideDialog: function (t) { t.modal("hide") }, createLayout: function (e) { var o = (t.airMode ? f([c([u(), p()])]) : "bottom" === t.toolbarPosition ? s([c([u(), d()]), l(), h()]) : s([l(), c([u(), d()]), h()])).render(); return o.insertAfter(e), { note: e, editor: o, toolbar: o.find(".note-toolbar"), editingArea: o.find(".note-editing-area"), editable: o.find(".note-editable"), codable: o.find(".note-codable"), statusbar: o.find(".note-statusbar") } }, removeLayout: function (t, e) { t.html(e.editable.html()), e.editor.remove(), t.show() } } }, interface: "bs3" }) } }, o = {}, n.m = e, n.c = o, n.d = function (t, e, o) { n.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: o }) }, n.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, n.t = function (t, e) { if (1 & e && (t = n(t)), 8 & e || 4 & e && "object" == typeof t && t && t.__esModule) return t; var o = Object.create(null); if (n.r(o), Object.defineProperty(o, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var i in t) n.d(o, i, (function (e) { return t[e] }).bind(null, i)); return o }, n.n = function (t) { var e = t && t.__esModule ? function () { return t.default } : function () { return t }; return n.d(e, "a", e), e }, n.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e) }, n.p = "", n(n.s = 52); function n(t) { var i; return (o[t] || (i = o[t] = { i: t, l: !1, exports: {} }, e[t].call(i.exports, i, i.exports, n), i.l = !0, i)).exports } });